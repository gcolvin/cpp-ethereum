(module
  (global $cb_dest (mut i32) (i32.const 0))
  (global $sp (mut i32) (i32.const -32))
  (global $init (mut i32) (i32.const 0))

  ;; memory related global
  (global $memstart i32  (i32.const 33832))
  ;; the number of 256 words stored in memory
  (global $wordCount (mut i64) (i64.const 0))
  ;; what was charged for the last memory allocation
  (global $prevMemCost (mut i64) (i64.const 0))

  ;; TODO: memory should only be 1, but can't resize right now
  (memory 500)
  (export "memory" (memory 0))

  (table
    (export "callback")
    anyfunc
    (elem $callback)
  )
   (func $PUSH
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)
  (local $sp i32)

  ;; increament stack pointer
  (set_local $sp (i32.add (get_global $sp) (i32.const 32)))
  (i64.store (get_local $sp) (get_local $a3))
  (i64.store (i32.add (get_local $sp) (i32.const 8)) (get_local $a2))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $a1))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a0))
)

(func $useGas (param $amount i64)
)
;; stack:
;;  0: word
;; -1: offset
(func $MSTORE
  (local $sp i32)

  (local $offset   i32)
  
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (set_local $offset0 (i64.load          (get_global $sp)))
  (set_local $offset1 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $offset2 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $offset3 (i64.load (i32.add (get_global $sp) (i32.const 24))))

  (set_local $offset 
             (call $check_overflow (get_local $offset0)
                                   (get_local $offset1)
                                   (get_local $offset2)
                                   (get_local $offset3)))
  ;; subtrace gas useage
  (call $memusegas (get_local $offset) (i32.const 32))

  ;; pop itme from the stack
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  ;; swap top stack item
  (call $bswap_m256 (get_local $sp))
  drop

  (set_local $offset (i32.add (get_local $offset) (get_global $memstart)))
  ;; store word to memory
  (i64.store          (get_local $offset)                 (i64.load          (get_local $sp)))
  (i64.store (i32.add (get_local $offset) (i32.const 8))  (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (i64.store (i32.add (get_local $offset) (i32.const 16)) (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (i64.store (i32.add (get_local $offset) (i32.const 24)) (i64.load (i32.add (get_local $sp) (i32.const 24))))
)
;; generated by ./wasm/generateInterface.js
(func $CALLVALUE  
    ;; zero out mem
    (i64.store (i32.add (get_global $sp) (i32.const 56)) (i64.const 0))
    (i64.store (i32.add (get_global $sp) (i32.const 48)) (i64.const 0))(call $bswap_m128 (i32.add (i32.const 32)(get_global $sp))) drop)

(func $ISZERO
  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_global $sp)))

  (i64.store (get_global $sp)
    (i64.extend_u/i32
      (call $iszero_256 (get_local $a0) (get_local $a1) (get_local $a2) (get_local $a3))
    )
  )

  ;; zero out the rest of memory
  (i64.store (i32.add (get_global $sp) (i32.const 8)) (i64.const 0))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.const 0))
)
(func $check_overflow
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (result i32)

  (local $MAX_INT i32)
  (set_local $MAX_INT (i32.const -1))

  (if
    (i32.and 
      (i32.and 
        (i64.eqz  (get_local $d))
        (i64.eqz  (get_local $c)))
      (i32.and 
        (i64.eqz  (get_local $b))
        (i64.lt_u (get_local $a) (i64.extend_u/i32 (get_local $MAX_INT)))))
     (return (i32.wrap/i64 (get_local $a))))

     (return (get_local $MAX_INT)))
(func $DUP
  (param $a0 i32)
  (local $sp i32)

  (local $sp_ref i32)
  
  (set_local $sp (i32.add (get_global $sp) (i32.const 32)))
  (set_local $sp_ref (i32.sub (i32.sub (get_local $sp) (i32.const 8)) (i32.mul (get_local $a0) (i32.const 32))))
  
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.load (get_local $sp_ref)))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 8))))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 16))))
  (i64.store          (get_local $sp)                 (i64.load (i32.sub (get_local $sp_ref) (i32.const 24))))
)
;; stack:
;;  0: offset
(func $MLOAD
  (local $offset i32)
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (set_local $offset0 (i64.load          (get_global $sp)))
  (set_local $offset1 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $offset2 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $offset3 (i64.load (i32.add (get_global $sp) (i32.const 24))))

  (set_local $offset 
             (call $check_overflow (get_local $offset0)
                                   (get_local $offset1)
                                   (get_local $offset2)
                                   (get_local $offset3)))
  ;; subttract gas useage
  (call $memusegas (get_local $offset) (i32.const  32))

  ;; FIXME: how to deal with overflow?
  (set_local $offset (i32.add (get_local $offset) (get_global $memstart)))

  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.load (i32.add (get_local $offset) (i32.const 24))))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.load (i32.add (get_local $offset) (i32.const 16))))
  (i64.store (i32.add (get_global $sp) (i32.const  8)) (i64.load (i32.add (get_local $offset) (i32.const  8))))
  (i64.store          (get_global $sp)                 (i64.load          (get_local $offset)))

  ;; swap
  (call $bswap_m256 (get_global $sp))
  drop
)
(func $SWAP
  (param $a0 i32)
  (local $sp_ref i32)

  (local $topa i64)
  (local $topb i64)
  (local $topc i64)
  (local $topd i64)
  
  (set_local $sp_ref (i32.sub (i32.add  (get_global $sp) (i32.const 24)) (i32.mul (i32.add (get_local $a0) (i32.const 1)) (i32.const 32))))

  (set_local $topa (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $topb (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $topc (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $topd (i64.load          (get_global $sp)))
  
  ;; replace the top element
  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.load (get_local $sp_ref)))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 8))))
  (i64.store (i32.add (get_global $sp) (i32.const  8)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 16))))
  (i64.store          (get_global $sp)                 (i64.load (i32.sub (get_local $sp_ref) (i32.const 24))))

  ;; store the old top element
  (i64.store (get_local $sp_ref)                          (get_local $topa))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 8))  (get_local $topb))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 16)) (get_local $topc))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 24)) (get_local $topd))
)
(func $ADD
  (local $sp i32)

  (local $a i64)
  (local $c i64)
  (local $d i64)
  (local $carry i64)

  (set_local $sp (get_global $sp))
  
  ;; d c b a
  ;; pop the stack 
  (set_local $a (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d (i64.load (get_local $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_local $sp) (i32.const 8)))

  ;; d 
  (set_local $carry (i64.add (get_local $d) (i64.load (i32.sub (get_local $sp) (i32.const 24)))))
  ;; save d  to mem
  (i64.store (i32.sub (get_local $sp) (i32.const 24)) (get_local $carry))
  ;; check  for overflow
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $carry) (get_local $d))))

  ;; c use $d as reg
  (set_local $d     (i64.add (i64.load (i32.sub (get_local $sp) (i32.const 16))) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $carry))))
  (set_local $d     (i64.add (get_local $c) (get_local $d)))
  ;; store the result
  (i64.store (i32.sub (get_local $sp) (i32.const 16)) (get_local $d))
  ;; check overflow
  (set_local $carry (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $d) (get_local $c))) (get_local $carry)))

  ;; b
  ;; add carry
  (set_local $d     (i64.add (i64.load (i32.sub (get_local $sp) (i32.const 8))) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $carry))))

  ;; use reg c
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $d (i64.add (get_local $c) (get_local $d)))
  (i64.store (i32.sub (get_local $sp) (i32.const 8)) (get_local $d))
  ;; a
  (i64.store (get_local $sp) 
             (i64.add        ;; add a 
               (get_local $a)
               (i64.add
                 (i64.load (get_local $sp))  ;; load the operand
                 (i64.or  ;; carry 
                   (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $c))) 
                   (get_local $carry)))))
)
(func $AND
  (i64.store (i32.sub (get_global $sp) (i32.const 8))  (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 8)))  (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const 8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load (get_global $sp))))
)
(func $LT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  (set_local $sp (get_global $sp))

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $b0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $b2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $b3 (i64.load (get_local $sp)))

  (i64.store (get_local $sp) (i64.extend_u/i32 
    (i32.or  (i64.lt_u (get_local $a0) (get_local $b0)) ;; a0 < b0
    (i32.and (i64.eq   (get_local $a0) (get_local $b0)) ;; a0 == b0
    (i32.or  (i64.lt_u (get_local $a1) (get_local $b1)) ;; a1 < b1
    (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
    (i32.or  (i64.lt_u (get_local $a2) (get_local $b2)) ;; a2 < b2
    (i32.and (i64.eq   (get_local $a2) (get_local $b2)) ;; a2 == b2
             (i64.lt_u (get_local $a3) (get_local $b3)))))))))) ;; a3 < b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.const 0))
)
(func $MUL
  (call $mul_256
        (i64.load (i32.add (get_global $sp) (i32.const 24)))
        (i64.load (i32.add (get_global $sp) (i32.const 16)))
        (i64.load (i32.add (get_global $sp) (i32.const  8)))
        (i64.load          (get_global $sp))
        (i64.load (i32.sub (get_global $sp) (i32.const  8)))
        (i64.load (i32.sub (get_global $sp) (i32.const 16)))
        (i64.load (i32.sub (get_global $sp) (i32.const 24)))
        (i64.load (i32.sub (get_global $sp) (i32.const 32)))
        (i32.sub (get_global $sp) (i32.const 8))
  )
)
(func $OR
  (i64.store (i32.sub (get_global $sp) (i32.const  8)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const  8))) (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const  8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load          (get_global $sp))))
)
(func $DIV
  (local $sp i32)
  ;; dividend
  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  ;; divisor
  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $carry i32)
  (local $temp  i64)
  (local $temp2  i64)

  (set_local $sp (get_global $sp))
  (set_local $maskd (i64.const 1))

  ;; load args from the stack
  (set_local $a (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d1 (i64.load (get_local $sp)))

  (block $main
    ;; check div by 0
    (if (call $iszero_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
      (br $main)
    )

    ;; align bits
    (block $done
      (loop $loop
        ;; align bits;
        (if 
          ;; check to make sure we are not overflowing
          (i32.or (i64.eqz (i64.clz (get_local $a1)))
          ;;  divisor < dividend
          (call $gte_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $a) (get_local $b) (get_local $c) (get_local $d)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.shl (get_local $d1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.shl (get_local $maskd) (i64.const 1)))

        (br $loop)
      )
    )


    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_256 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_256 (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $d) (get_local $d1)))
            (set_local $d     (i64.sub  (get_local $d) (get_local $d1)))
            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))
            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))
            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))

            ;; result = result + mask
            (set_local $dq   (i64.add (get_local $maskd) (get_local $dq)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $dq) (get_local $maskd))))
            (set_local $cq   (i64.add (get_local $cq) (get_local $temp)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $cq) (get_local $temp))))
            (set_local $cq   (i64.add (get_local $maskc) (get_local $cq)))
            (set_local $temp (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $cq) (get_local $maskc))) (get_local $temp)))
            (set_local $bq   (i64.add (get_local $bq) (get_local $temp)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $bq) (get_local $temp))))
            (set_local $bq   (i64.add (get_local $maskb) (get_local $bq)))
            (set_local $aq   (i64.add (get_local $maska) (i64.add (get_local $aq) (i64.or (i64.extend_u/i32 (i64.lt_u (get_local $bq) (get_local $maskb))) (get_local $temp)))))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $aq))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $bq))
  (i64.store (i32.add (get_local $sp) (i32.const 8))  (get_local $cq))
  (i64.store (get_local $sp) (get_local $dq))
)
;; stack:
;;  0: A
;; -1: B
;; -2: MOD
(func $ADDMOD
  (local $sp i32)

  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  (local $moda i64)
  (local $modb i64)
  (local $modc i64)
  (local $modd i64)

  (local $carry i64)

  (set_local $sp (get_global $sp))

  ;; load args from the stack
  (set_local $a (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d1 (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $moda (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $modb (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $modc (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $modd (i64.load (get_local $sp)))

  ;; a * 64^3 + b*64^2 + c*64 + d 
  ;; d 
  (set_local $d     (i64.add (get_local $d1) (get_local $d)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $d1))))
  ;; c
  (set_local $c     (i64.add (get_local $c) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $c) (get_local $carry))))
  (set_local $c     (i64.add (get_local $c1) (get_local $c)))
  (set_local $carry (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $c) (get_local $c1))) (get_local $carry)))
  ;; b
  (set_local $b     (i64.add (get_local $b) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $b) (get_local $carry))))
  (set_local $b     (i64.add (get_local $b1) (get_local $b)))
  (set_local $carry (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $b) (get_local $b1))) (get_local $carry)))
  ;; a
  (set_local $a     (i64.add (get_local $a) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $a) (get_local $carry))))
  (set_local $a     (i64.add (get_local $a1) (get_local $a)))
  (set_local $carry (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $a) (get_local $a1))) (get_local $carry)))

  (call $mod_320
        (get_local $carry) (get_local $a)    (get_local $b)    (get_local $c)    (get_local $d)
        (i64.const 0)      (get_local $moda) (get_local $modb) (get_local $modc) (get_local $modd) (get_local $sp))
)
(func $XOR
  (i64.store (i32.sub (get_global $sp) (i32.const  8)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const  8))) (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const  8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load (i32.add (get_global $sp) (i32.const  0)))))
)
(func $MULMOD
  (local $sp i32)

  (local $a i64)
  (local $c i64)
  (local $e i64)
  (local $g i64)
  (local $i i64)
  (local $k i64)
  (local $m i64)
  (local $o i64)
  (local $b i64)
  (local $d i64)
  (local $f i64)
  (local $h i64)
  (local $j i64)
  (local $l i64)
  (local $n i64)
  (local $p i64)
  (local $temp7 i64)
  (local $temp6 i64)
  (local $temp5 i64)
  (local $temp4 i64)
  (local $temp3 i64)
  (local $temp2 i64)
  (local $temp1 i64)
  (local $temp0 i64)
  (local $rowCarry i64)

  (local $moda i64)
  (local $modb i64)
  (local $modc i64)
  (local $modd i64)

  ;; pop two items of the stack
  (set_local $a (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $c (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $e (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $g (i64.load          (get_global $sp)))
  (set_local $i (i64.load (i32.sub (get_global $sp) (i32.const  8))))
  (set_local $k (i64.load (i32.sub (get_global $sp) (i32.const 16))))
  (set_local $m (i64.load (i32.sub (get_global $sp) (i32.const 24))))
  (set_local $o (i64.load (i32.sub (get_global $sp) (i32.const 32))))

  (set_local $sp (i32.sub (get_global $sp) (i32.const 64)))

  ;; MUL
  ;;  a b c d e f g h
  ;;* i j k l m n o p
  ;;----------------

  ;; split the ops
  (set_local $b (i64.and (get_local $a) (i64.const 4294967295)))
  (set_local $a (i64.shr_u (get_local $a) (i64.const 32))) 

  (set_local $d (i64.and (get_local $c) (i64.const 4294967295)))
  (set_local $c (i64.shr_u (get_local $c) (i64.const 32))) 

  (set_local $f (i64.and (get_local $e) (i64.const 4294967295)))
  (set_local $e (i64.shr_u (get_local $e) (i64.const 32)))

  (set_local $h (i64.and (get_local $g) (i64.const 4294967295)))
  (set_local $g (i64.shr_u (get_local $g) (i64.const 32)))

  (set_local $j (i64.and (get_local $i) (i64.const 4294967295)))
  (set_local $i (i64.shr_u (get_local $i) (i64.const 32))) 

  (set_local $l (i64.and (get_local $k) (i64.const 4294967295)))
  (set_local $k (i64.shr_u (get_local $k) (i64.const 32))) 

  (set_local $n (i64.and (get_local $m) (i64.const 4294967295)))
  (set_local $m (i64.shr_u (get_local $m) (i64.const 32)))

  (set_local $p (i64.and (get_local $o) (i64.const 4294967295)))
  (set_local $o (i64.shr_u (get_local $o) (i64.const 32)))

   ;; first row multiplication 
  ;; p * h
  (set_local $temp0 (i64.mul (get_local $p) (get_local $h)))
  ;; p * g + carry
  (set_local $temp1 (i64.add (i64.mul (get_local $p) (get_local $g)) (i64.shr_u (get_local $temp0) (i64.const 32))))
  ;; p * f + carry
  (set_local $temp2 (i64.add (i64.mul (get_local $p) (get_local $f)) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; p * e + carry
  (set_local $temp3 (i64.add (i64.mul (get_local $p) (get_local $e)) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; p * d + carry
  (set_local $temp4 (i64.add (i64.mul (get_local $p) (get_local $d)) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; p * c + carry
  (set_local $temp5 (i64.add (i64.mul (get_local $p) (get_local $c)) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; p * b + carry
  (set_local $temp6 (i64.add (i64.mul (get_local $p) (get_local $b)) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; p * a + carry
  (set_local $temp7 (i64.add (i64.mul (get_local $p) (get_local $a)) (i64.shr_u (get_local $temp6) (i64.const 32))))
  (set_local $rowCarry (i64.shr_u (get_local $temp7) (i64.const 32)))

  ;; second row
  ;; o * h + $temp1 
  (set_local $temp1 (i64.add (i64.mul (get_local $o) (get_local $h)) (i64.and (get_local $temp1) (i64.const 4294967295))))
  ;; o * g + $temp2 + carry
  (set_local $temp2 (i64.add (i64.add (i64.mul (get_local $o) (get_local $g)) (i64.and (get_local $temp2) (i64.const 4294967295))) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; o * f + $temp3 + carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $o) (get_local $f)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; o * e + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $o) (get_local $e)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; o * d + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $o) (get_local $d)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; o * c + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $o) (get_local $c)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; o * b + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $o) (get_local $b)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; o * a + carry + rowCarry
  (set_local $p (i64.add (i64.add (i64.mul (get_local $o) (get_local $a)) (i64.shr_u (get_local $temp7) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $p) (i64.const 32)))

  ;; third row - n
  ;; n * h + $temp2 
  (set_local $temp2 (i64.add (i64.mul (get_local $n) (get_local $h)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  ;; n * g + $temp3  carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $n) (get_local $g)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; n * f + $temp4) + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $n) (get_local $f)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; n * e + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $n) (get_local $e)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; n * d + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $n) (get_local $d)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; n * c + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $n) (get_local $c)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; n * b + $p + carry
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $n) (get_local $b)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; n * a + carry
  (set_local $o (i64.add (i64.add (i64.mul (get_local $n) (get_local $a)) (i64.shr_u (get_local $p) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $o) (i64.const 32)))

  ;; forth row 
  ;; m * h + $temp3
  (set_local $temp3 (i64.add (i64.mul (get_local $m) (get_local $h)) (i64.and (get_local $temp3) (i64.const 4294967295))))
  ;; m * g + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $m) (get_local $g)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; m * f + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $m) (get_local $f)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; m * e + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $m) (get_local $e)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; m * d + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $m) (get_local $d)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; m * c + $p + carry
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $m) (get_local $c)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; m * b + $o + carry
  (set_local $o     (i64.add (i64.add (i64.mul (get_local $m) (get_local $b)) (i64.and (get_local $o)     (i64.const 4294967295))) (i64.shr_u (get_local $p)     (i64.const 32))))
  ;; m * a + carry + rowCarry
  (set_local $n     (i64.add (i64.add (i64.mul (get_local $m) (get_local $a)) (i64.shr_u (get_local $o) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $n) (i64.const 32)))

  ;; fith row
  ;; l * h + $temp4
  (set_local $temp4 (i64.add (i64.mul (get_local $l) (get_local $h)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  ;; l * g + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $l) (get_local $g)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; l * f + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $l) (get_local $f)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; l * e + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $l) (get_local $e)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; l * d + $p + carry
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $l) (get_local $d)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; l * c + $o + carry
  (set_local $o     (i64.add (i64.add (i64.mul (get_local $l) (get_local $c)) (i64.and (get_local $o)     (i64.const 4294967295))) (i64.shr_u (get_local $p)     (i64.const 32))))
  ;; l * b + $n + carry
  (set_local $n     (i64.add (i64.add (i64.mul (get_local $l) (get_local $b)) (i64.and (get_local $n)     (i64.const 4294967295))) (i64.shr_u (get_local $o)     (i64.const 32))))
  ;; l * a + carry + rowCarry
  (set_local $m     (i64.add (i64.add (i64.mul (get_local $l) (get_local $a)) (i64.shr_u (get_local $n) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $m) (i64.const 32)))

  ;; sixth row 
  ;; k * h + $temp5
  (set_local $temp5 (i64.add (i64.mul (get_local $k) (get_local $h)) (i64.and (get_local $temp5) (i64.const 4294967295))))
  ;; k * g + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $k) (get_local $g)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; k * f + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $k) (get_local $f)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; k * e + $p + carry
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $k) (get_local $e)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; k * d + $o + carry
  (set_local $o     (i64.add (i64.add (i64.mul (get_local $k) (get_local $d)) (i64.and (get_local $o)     (i64.const 4294967295))) (i64.shr_u (get_local $p)     (i64.const 32))))
  ;; k * c + $n + carry
  (set_local $n     (i64.add (i64.add (i64.mul (get_local $k) (get_local $c)) (i64.and (get_local $n)     (i64.const 4294967295))) (i64.shr_u (get_local $o)     (i64.const 32))))
  ;; k * b + $m + carry
  (set_local $m     (i64.add (i64.add (i64.mul (get_local $k) (get_local $b)) (i64.and (get_local $m)     (i64.const 4294967295))) (i64.shr_u (get_local $n)     (i64.const 32))))
  ;; k * a + carry
  (set_local $l     (i64.add (i64.add (i64.mul (get_local $k) (get_local $a)) (i64.shr_u (get_local $m) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $l) (i64.const 32)))

  ;; seventh row
  ;; j * h + $temp6
  (set_local $temp6 (i64.add (i64.mul (get_local $j) (get_local $h)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  ;; j * g + $temp7 + carry
  (set_local $temp7 (i64.add (i64.add (i64.mul (get_local $j) (get_local $g)) (i64.and (get_local $temp7) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; j * f + $p +carry
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $j) (get_local $f)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; j * e + $o + carry
  (set_local $o     (i64.add (i64.add (i64.mul (get_local $j) (get_local $e)) (i64.and (get_local $o)     (i64.const 4294967295))) (i64.shr_u (get_local $p)     (i64.const 32))))
  ;; j * d + $n + carry
  (set_local $n     (i64.add (i64.add (i64.mul (get_local $j) (get_local $d)) (i64.and (get_local $n)     (i64.const 4294967295))) (i64.shr_u (get_local $o)     (i64.const 32))))
  ;; j * c + $m + carry
  (set_local $m     (i64.add (i64.add (i64.mul (get_local $j) (get_local $c)) (i64.and (get_local $m)     (i64.const 4294967295))) (i64.shr_u (get_local $n)     (i64.const 32))))
  ;; j * b + $l + carry
  (set_local $l     (i64.add (i64.add (i64.mul (get_local $j) (get_local $b)) (i64.and (get_local $l)     (i64.const 4294967295))) (i64.shr_u (get_local $m)     (i64.const 32))))
  ;; j * a + carry
  (set_local $k     (i64.add (i64.add (i64.mul (get_local $j) (get_local $a)) (i64.shr_u (get_local $l) (i64.const 32))) (get_local $rowCarry)))
  (set_local $rowCarry (i64.shr_u (get_local $k) (i64.const 32)))

  ;; eigth row
  ;; i * h + $temp7 
  (set_local $temp7 (i64.add (i64.mul (get_local $i) (get_local $h)) (i64.and (get_local $temp7) (i64.const 4294967295))))
  ;; i * g + $p 
  (set_local $p     (i64.add (i64.add (i64.mul (get_local $i) (get_local $g)) (i64.and (get_local $p)     (i64.const 4294967295))) (i64.shr_u (get_local $temp7) (i64.const 32))))
  ;; i * f + $o + carry
  (set_local $o     (i64.add (i64.add (i64.mul (get_local $i) (get_local $f)) (i64.and (get_local $o)     (i64.const 4294967295))) (i64.shr_u (get_local $p)     (i64.const 32))))
  ;; i * e + $n + carry
  (set_local $n     (i64.add (i64.add (i64.mul (get_local $i) (get_local $e)) (i64.and (get_local $n)     (i64.const 4294967295))) (i64.shr_u (get_local $o)     (i64.const 32))))
  ;; i * d + $m + carry
  (set_local $m     (i64.add (i64.add (i64.mul (get_local $i) (get_local $d)) (i64.and (get_local $m)     (i64.const 4294967295))) (i64.shr_u (get_local $n)     (i64.const 32))))
  ;; i * c + $l + carry
  (set_local $l     (i64.add (i64.add (i64.mul (get_local $i) (get_local $c)) (i64.and (get_local $l)     (i64.const 4294967295))) (i64.shr_u (get_local $m)     (i64.const 32))))
  ;; i * b + $k + carry
  (set_local $k     (i64.add (i64.add (i64.mul (get_local $i) (get_local $b)) (i64.and (get_local $k)     (i64.const 4294967295))) (i64.shr_u (get_local $l)     (i64.const 32))))
  ;; i * a + carry
  (set_local $j     (i64.add (i64.add (i64.mul (get_local $i) (get_local $a)) (i64.shr_u (get_local $k) (i64.const 32))) (get_local $rowCarry)))

  ;; combine terms
  (set_local $a (get_local $j))
  (set_local $b (i64.or (i64.shl (get_local $k)     (i64.const 32)) (i64.and (get_local $l)     (i64.const 4294967295))))
  (set_local $c (i64.or (i64.shl (get_local $m)     (i64.const 32)) (i64.and (get_local $n)     (i64.const 4294967295))))
  (set_local $d (i64.or (i64.shl (get_local $o)     (i64.const 32)) (i64.and (get_local $p)     (i64.const 4294967295))))
  (set_local $e (i64.or (i64.shl (get_local $temp7) (i64.const 32)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  (set_local $f (i64.or (i64.shl (get_local $temp5) (i64.const 32)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  (set_local $g (i64.or (i64.shl (get_local $temp3) (i64.const 32)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  (set_local $h (i64.or (i64.shl (get_local $temp1) (i64.const 32)) (i64.and (get_local $temp0) (i64.const 4294967295))))

  ;; pop the MOD argmunet off the stack
  (set_local $moda (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $modb (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $modc (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $modd (i64.load          (get_local $sp)))

  (call $mod_512
         (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $e) (get_local $f) (get_local $g) (get_local $h) 
         (i64.const 0)  (i64.const 0) (i64.const 0)  (i64.const 0)  (get_local $moda) (get_local $modb) (get_local $modc) (get_local $modd) (i32.add (get_local $sp) (i32.const 24))
  )
)
(func $SUB
  (local $sp i32)

  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  (local $carry i64)
  (local $temp i64)

  (set_local $a (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $d (i64.load          (get_global $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $d1 (i64.load          (get_local $sp)))

  ;; a * 64^3 + b*64^2 + c*64 + d 
  ;; d
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $d1))))
  (set_local $d (i64.sub (get_local $d) (get_local $d1)))

  ;; c
  (set_local $temp (i64.sub (get_local $c) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.gt_u (get_local $temp) (get_local $c))))
  (set_local $c (i64.sub (get_local $temp) (get_local $c1)))
  (set_local $carry (i64.or (i64.extend_u/i32 (i64.gt_u (get_local $c) (get_local $temp))) (get_local $carry)))

  ;; b
  (set_local $temp (i64.sub (get_local $b) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.gt_u (get_local $temp) (get_local $b))))
  (set_local $b (i64.sub (get_local $temp) (get_local $b1)))

  ;; a
  (set_local $a (i64.sub (i64.sub (get_local $a) (i64.or (i64.extend_u/i32 (i64.gt_u (get_local $b) (get_local $temp))) (get_local $carry))) (get_local $a1)))

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $b))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (get_local $c))
  (i64.store          (get_local $sp)                 (get_local $d))
)
;; generated by ./wasm/generateInterface.js
(func $CODECOPY (param $callback i32)(local $offset0 i32)(local $length0 i32) (set_local $offset0 
    (call $check_overflow
      (i64.load (i32.add (get_global $sp) (i32.const 0)))
      (i64.load (i32.add (get_global $sp) (i32.const 8)))
      (i64.load (i32.add (get_global $sp) (i32.const 16)))
      (i64.load (i32.add (get_global $sp) (i32.const 24)))))(set_local $length0 
    (call $check_overflow 
      (i64.load (i32.add (get_global $sp) (i32.const -64)))
      (i64.load (i32.add (get_global $sp) (i32.const -56)))
      (i64.load (i32.add (get_global $sp) (i32.const -48)))
      (i64.load (i32.add (get_global $sp) (i32.const -40)))))

    (call $memusegas (get_local $offset0) (get_local $length0))
    (set_local $offset0 (i32.add (get_global $memstart) (get_local $offset0))));; generated by ./wasm/generateInterface.js
(func $RETURN (local $offset0 i32)(local $length0 i32) (set_local $offset0 
    (call $check_overflow
      (i64.load (i32.add (get_global $sp) (i32.const 0)))
      (i64.load (i32.add (get_global $sp) (i32.const 8)))
      (i64.load (i32.add (get_global $sp) (i32.const 16)))
      (i64.load (i32.add (get_global $sp) (i32.const 24)))))(set_local $length0 
    (call $check_overflow 
      (i64.load (i32.add (get_global $sp) (i32.const -32)))
      (i64.load (i32.add (get_global $sp) (i32.const -24)))
      (i64.load (i32.add (get_global $sp) (i32.const -16)))
      (i64.load (i32.add (get_global $sp) (i32.const -8)))))

    (call $memusegas (get_local $offset0) (get_local $length0))
    (set_local $offset0 (i32.add (get_global $memstart) (get_local $offset0))) )

(func $memusegas
  (param $offset i32)
  (param $length i32)

  (local $cost i64)
  ;; the number of new words being allocated
  (local $newWordCount i64)

  (if (i32.eqz (get_local $length))
    (then (return))
  )

  ;; const newMemoryWordCount = Math.ceil[[offset + length] / 32]
  (set_local $newWordCount 
    (i64.div_u (i64.add (i64.const 31) (i64.add (i64.extend_u/i32 (get_local $offset)) (i64.extend_u/i32 (get_local $length))))
               (i64.const 32)))

  ;;if [runState.highestMem >= highestMem]  return
  (if (i64.le_u (get_local $newWordCount) (get_global $wordCount))
    (then (return))
  )

  ;; words * 3 + words ^2 / 512
  (set_local $cost
     (i64.add
       (i64.mul (get_local $newWordCount) (i64.const 3))
       (i64.div_u
         (i64.mul (get_local $newWordCount)
                  (get_local $newWordCount))
         (i64.const 512))))

  (call $useGas  (i64.sub (get_local $cost) (get_global $prevMemCost)))
  (set_global $prevMemCost (get_local $cost))
  (set_global $wordCount (get_local $newWordCount))

  ;; grow actual memory
  ;; the first 31704 bytes are guaranteed to be available
  ;; adjust for 32 bytes  - the maximal size of MSTORE write
  ;; TODO it should be current_memory * page_size
  (set_local $offset (i32.add (get_local $length) (i32.add (get_local $offset) (get_global $memstart))))
  (if (i32.gt_u (get_local $offset) (i32.mul (i32.const 65536) (current_memory)))
    (then
      (grow_memory
        (i32.div_u (i32.add (i32.const 65535) (i32.sub (get_local $offset) (current_memory))) (i32.const 65536)))
      drop
    )
  )
)
(func $bswap_m256
  (param $sp i32)
  (result i32)
  (local $temp i64)

  (set_local $temp (call $bswap_i64 (i64.load (get_local $sp))))
  (i64.store (get_local $sp) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 24)))))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $temp))

  (set_local $temp (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 8)))))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 16)))))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $temp))
  (get_local $sp)
)
(func $bswap_m128
  (param $sp i32)
  (result i32)
  (local $temp i64)

  (set_local $temp (call $bswap_i64 (i64.load (get_local $sp))))
  (i64.store (get_local $sp) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 8)))))
  (i64.store (i32.add (get_local $sp) (i32.const 8)) (get_local $temp))
  (get_local $sp)
)
(func $iszero_256
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (result i32)

  (i64.eqz (i64.or (i64.or (i64.or (get_local 0) (get_local 1)) (get_local 2)) (get_local 3))) 
)
(func $mul_256
  ;;  a b c d e f g h
  ;;* i j k l m n o p
  ;;----------------
  (param $a i64)
  (param $c i64)
  (param $e i64)
  (param $g i64)

  (param $i i64)
  (param $k i64)
  (param $m i64)
  (param $o i64)

  (param $sp i32)

  (local $b i64)
  (local $d i64)
  (local $f i64)
  (local $h i64)
  (local $j i64)
  (local $l i64)
  (local $n i64)
  (local $p i64)
  (local $temp6 i64)
  (local $temp5 i64)
  (local $temp4 i64)
  (local $temp3 i64)
  (local $temp2 i64)
  (local $temp1 i64)
  (local $temp0 i64)

  ;; split the ops
  (set_local $b (i64.and (get_local $a) (i64.const 4294967295)))
  (set_local $a (i64.shr_u (get_local $a) (i64.const 32))) 

  (set_local $d (i64.and (get_local $c) (i64.const 4294967295)))
  (set_local $c (i64.shr_u (get_local $c) (i64.const 32))) 

  (set_local $f (i64.and (get_local $e) (i64.const 4294967295)))
  (set_local $e (i64.shr_u (get_local $e) (i64.const 32)))

  (set_local $h (i64.and (get_local $g) (i64.const 4294967295)))
  (set_local $g (i64.shr_u (get_local $g) (i64.const 32)))

  (set_local $j (i64.and (get_local $i) (i64.const 4294967295)))
  (set_local $i (i64.shr_u (get_local $i) (i64.const 32))) 

  (set_local $l (i64.and (get_local $k) (i64.const 4294967295)))
  (set_local $k (i64.shr_u (get_local $k) (i64.const 32))) 

  (set_local $n (i64.and (get_local $m) (i64.const 4294967295)))
  (set_local $m (i64.shr_u (get_local $m) (i64.const 32)))

  (set_local $p (i64.and (get_local $o) (i64.const 4294967295)))
  (set_local $o (i64.shr_u (get_local $o) (i64.const 32)))
  ;; first row multiplication 
  ;; p * h
  (set_local $temp0 (i64.mul (get_local $p) (get_local $h)))
  ;; p * g + carry
  (set_local $temp1 (i64.add (i64.mul (get_local $p) (get_local $g)) (i64.shr_u (get_local $temp0) (i64.const 32))))
  ;; p * f + carry
  (set_local $temp2 (i64.add (i64.mul (get_local $p) (get_local $f)) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; p * e + carry
  (set_local $temp3 (i64.add (i64.mul (get_local $p) (get_local $e)) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; p * d + carry
  (set_local $temp4 (i64.add (i64.mul (get_local $p) (get_local $d)) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; p * c + carry
  (set_local $temp5  (i64.add (i64.mul (get_local $p) (get_local $c)) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; p * b + carry
  (set_local $temp6  (i64.add (i64.mul (get_local $p) (get_local $b)) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; p * a + carry
  (set_local $a  (i64.add (i64.mul (get_local $p) (get_local $a)) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; second row
  ;; o * h + $temp1 "pg"
  (set_local $temp1 (i64.add (i64.mul (get_local $o) (get_local $h)) (i64.and (get_local $temp1) (i64.const 4294967295))))
  ;; o * g + $temp2 "pf" + carry
  (set_local $temp2 (i64.add (i64.add (i64.mul (get_local $o) (get_local $g)) (i64.and (get_local $temp2) (i64.const 4294967295))) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; o * f + $temp3 "pe" + carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $o) (get_local $f)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; o * e + $temp4  + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $o) (get_local $e)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; o * d + $temp5  + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $o) (get_local $d)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; o * c + $temp6  + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $o) (get_local $c)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; o * b + $a  + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $o) (get_local $b)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; third row - n
  ;; n * h + $temp2 
  (set_local $temp2 (i64.add (i64.mul (get_local $n) (get_local $h)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  ;; n * g + $temp3 + carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $n) (get_local $g)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; n * f + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $n) (get_local $f)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; n * e + $temp5  + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $n) (get_local $e)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; n * d + $temp6  + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $n) (get_local $d)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; n * c + $a  + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $n) (get_local $c)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; forth row 
  ;; m * h + $temp3
  (set_local $temp3 (i64.add (i64.mul (get_local $m) (get_local $h)) (i64.and (get_local $temp3) (i64.const 4294967295))))
  ;; m * g + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $m) (get_local $g)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; m * f + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $m) (get_local $f)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; m * e + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $m) (get_local $e)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; m * d + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $m) (get_local $d)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; fith row
  ;; l * h + $temp4
  (set_local $temp4 (i64.add (i64.mul (get_local $l) (get_local $h)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  ;; l * g + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $l) (get_local $g)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; l * f + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $l) (get_local $f)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; l * e + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $l) (get_local $e)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; sixth row 
  ;; k * h + $temp5
  (set_local $temp5 (i64.add (i64.mul (get_local $k) (get_local $h)) (i64.and (get_local $temp5) (i64.const 4294967295))))
  ;; k * g + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $k) (get_local $g)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; k * f + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $k) (get_local $f)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; seventh row
  ;; j * h + $temp6
  (set_local $temp6 (i64.add (i64.mul (get_local $j) (get_local $h)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  ;; j * g + $a + carry

  ;; eigth row
  ;; i * h + $a
  (set_local $a (i64.add (i64.mul (get_local $i) (get_local $h)) (i64.and (i64.add (i64.add (i64.mul (get_local $j) (get_local $g)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))) (i64.const 4294967295))))

  ;; combine terms
  (set_local $a (i64.or (i64.shl (get_local $a) (i64.const 32)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  (set_local $c (i64.or (i64.shl (get_local $temp5) (i64.const 32)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  (set_local $e (i64.or (i64.shl (get_local $temp3) (i64.const 32)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  (set_local $g (i64.or (i64.shl (get_local $temp1) (i64.const 32)) (i64.and (get_local $temp0) (i64.const 4294967295))))

  ;; save stack 
  (i64.store (get_local $sp) (get_local $a))
  (i64.store (i32.sub (get_local $sp) (i32.const 8)) (get_local $c))
  (i64.store (i32.sub (get_local $sp) (i32.const 16)) (get_local $e))
  (i64.store (i32.sub (get_local $sp) (i32.const 24)) (get_local $g))
)
;; is a less than or equal to b // a >= b
(func $gte_256
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)

  (param $b0 i64)
  (param $b1 i64)
  (param $b2 i64)
  (param $b3 i64)

  (result i32)

  ;; a0 > b0 || [a0 == b0 && [a1 > b1 || [a1 == b1 && [a2 > b2 || [a2 == b2 && a3 >= b3 ]]]]
  (i32.or  (i64.gt_u (get_local $a0) (get_local $b0)) ;; a0 > b0
  (i32.and (i64.eq   (get_local $a0) (get_local $b0))
  (i32.or  (i64.gt_u (get_local $a1) (get_local $b1)) ;; a1 > b1
  (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
  (i32.or  (i64.gt_u (get_local $a2) (get_local $b2)) ;; a2 > b2
  (i32.and (i64.eq   (get_local $a2) (get_local $b2))
           (i64.ge_u (get_local $a3) (get_local $b3))))))))
)
(func $MOD
  (local $sp i32)

  ;; dividend
  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  ;; divisor
  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $carry i32)
  (local $temp i64)

  (set_local $maskd (i64.const 1))

  ;; load args from the stack
  (set_local $a (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $d (i64.load          (get_global $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $d1 (i64.load          (get_local $sp)))


  (block $main
    ;; check div by 0
    (if (call $iszero_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
      (then
        (set_local $a (i64.const 0))
        (set_local $b (i64.const 0))
        (set_local $c (i64.const 0))
        (set_local $d (i64.const 0))
        (br $main)
      )
    )

    ;; align bits
    (block $done
        (loop $loop
        ;; align bits;
        (if (i32.or (i64.eqz (i64.clz (get_local $a1))) (call $gte_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $a) (get_local $b) (get_local $c) (get_local $d)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.shl (get_local $d1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.shl (get_local $maskd) (i64.const 1)))

        (br $loop)
      )
    )

    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_256 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_256 (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $d) (get_local $d1)))
            (set_local $d     (i64.sub  (get_local $d) (get_local $d1)))
            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))
            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))
            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $b))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (get_local $c))
  (i64.store          (get_local $sp)                 (get_local $d))
)
(func $mod_320
  ;; dividend
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (param $e i64)

  ;; divisor
  (param $a1 i64)
  (param $b1 i64)
  (param $c1 i64)
  (param $d1 i64)
  (param $e1 i64)

  ;; stack pointer
  (param $sp i32)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)
  (local $eq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $maske i64)

  (local $carry i32)
  (local $temp i64)

  (set_local $maske (i64.const 1))
  (block $main
    ;; check div by 0
    (if (call $iszero_320 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1)) 
      (then
        (set_local $a (i64.const 0))
        (set_local $b (i64.const 0))
        (set_local $c (i64.const 0))
        (set_local $d (i64.const 0))
        (set_local $e (i64.const 0))
        (br $main)
      )
    )

    (block $done
      ;; align bits
      (loop $loop
        ;; align bits;
        (if (i32.or (i64.eqz (i64.clz (get_local $a1))) (call $gte_320
                                                            (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1)
                                                            (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $e)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.add (i64.shl (get_local $d1) (i64.const 1)) (i64.shr_u (get_local $e1) (i64.const 63))))
        (set_local $e1 (i64.shl (get_local $e1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.add (i64.shl (get_local $maskd) (i64.const 1)) (i64.shr_u (get_local $maske) (i64.const 63))))
        (set_local $maske (i64.shl (get_local $maske) (i64.const 1)))
        (br $loop)
      )
    )

    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_320 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd) (get_local $maske))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_320 (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $e) (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $e) (get_local $e1)))
            (set_local $e     (i64.sub  (get_local $e) (get_local $e1)))

            (set_local $temp  (i64.sub  (get_local $d) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $d)))
            (set_local $d     (i64.sub  (get_local $temp) (get_local $d1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $d) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))

            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $e1 (i64.add (i64.shr_u (get_local $e1) (i64.const 1)) (i64.shl (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maske (i64.add (i64.shr_u (get_local $maske) (i64.const 1)) (i64.shl (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $b))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $c))
  (i64.store (i32.add (get_local $sp) (i32.const 8))  (get_local $d))
  (i64.store (get_local $sp)                          (get_local $e))
)
;; Modulo 0x06
(func $mod_512
  ;; dividend
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (param $e i64)
  (param $f i64)
  (param $g i64)
  (param $h i64)

  ;; divisor
  (param $a1 i64)
  (param $b1 i64)
  (param $c1 i64)
  (param $d1 i64)
  (param $e1 i64)
  (param $f1 i64)
  (param $g1 i64)
  (param $h1 i64)

  (param $sp i32)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $maske i64)
  (local $maskf i64)
  (local $maskg i64)
  (local $maskh i64)

  (local $carry i32)
  (local $temp i64)

  (set_local $maskh (i64.const 1))

  (block $main
    ;; check div by 0
    (if (call $iszero_512 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1) (get_local $f1) (get_local $g1) (get_local $h1))
      (then
        (set_local $e (i64.const 0))
        (set_local $f (i64.const 0))
        (set_local $g (i64.const 0))
        (set_local $h (i64.const 0))
        (br $main)
      )
    )

    ;; align bits
    (block $done
      (loop $loop
        ;; align bits;
        (if (i32.or (i64.eqz (i64.clz (get_local $a1)))
          (call $gte_512 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1) (get_local $f1) (get_local $g1) (get_local $h1)
                         (get_local $a)  (get_local $b)  (get_local $c)  (get_local $d)  (get_local $e)  (get_local $f)  (get_local $g)  (get_local $h)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.add (i64.shl (get_local $d1) (i64.const 1)) (i64.shr_u (get_local $e1) (i64.const 63))))
        (set_local $e1 (i64.add (i64.shl (get_local $e1) (i64.const 1)) (i64.shr_u (get_local $f1) (i64.const 63))))
        (set_local $f1 (i64.add (i64.shl (get_local $f1) (i64.const 1)) (i64.shr_u (get_local $g1) (i64.const 63))))
        (set_local $g1 (i64.add (i64.shl (get_local $g1) (i64.const 1)) (i64.shr_u (get_local $h1) (i64.const 63))))
        (set_local $h1 (i64.shl (get_local $h1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.add (i64.shl (get_local $maskd) (i64.const 1)) (i64.shr_u (get_local $maske) (i64.const 63))))
        (set_local $maske (i64.add (i64.shl (get_local $maske) (i64.const 1)) (i64.shr_u (get_local $maskf) (i64.const 63))))
        (set_local $maskf (i64.add (i64.shl (get_local $maskf) (i64.const 1)) (i64.shr_u (get_local $maskg) (i64.const 63))))
        (set_local $maskg (i64.add (i64.shl (get_local $maskg) (i64.const 1)) (i64.shr_u (get_local $maskh) (i64.const 63))))
        (set_local $maskh (i64.shl (get_local $maskh) (i64.const 1)))
        (br $loop)
      )
    )

    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_512 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd) (get_local $maske) (get_local $maskf) (get_local $maskg) (get_local $maskh))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_512 
          (get_local $a)  (get_local $b)  (get_local $c)  (get_local $d)  (get_local $e)  (get_local $f)  (get_local $g)  (get_local $h)
          (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $e1) (get_local $f1) (get_local $g1) (get_local $h1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $h) (get_local $h1)))
            (set_local $h     (i64.sub  (get_local $h) (get_local $h1)))

            (set_local $temp  (i64.sub  (get_local $g) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $g)))
            (set_local $g     (i64.sub  (get_local $temp) (get_local $g1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $g) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $f) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $f)))
            (set_local $f     (i64.sub  (get_local $temp) (get_local $f1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $f) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $e) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $e)))
            (set_local $e     (i64.sub  (get_local $temp) (get_local $e1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $e) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $d) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $d)))
            (set_local $d     (i64.sub  (get_local $temp) (get_local $d1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $d) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))

            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))
            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $h1 (i64.add (i64.shr_u (get_local $h1) (i64.const 1)) (i64.shl (get_local $g1) (i64.const 63))))
        (set_local $g1 (i64.add (i64.shr_u (get_local $g1) (i64.const 1)) (i64.shl (get_local $f1) (i64.const 63))))
        (set_local $f1 (i64.add (i64.shr_u (get_local $f1) (i64.const 1)) (i64.shl (get_local $e1) (i64.const 63))))
        (set_local $e1 (i64.add (i64.shr_u (get_local $e1) (i64.const 1)) (i64.shl (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maskh (i64.add (i64.shr_u (get_local $maskh) (i64.const 1)) (i64.shl (get_local $maskg) (i64.const 63))))
        (set_local $maskg (i64.add (i64.shr_u (get_local $maskg) (i64.const 1)) (i64.shl (get_local $maskf) (i64.const 63))))
        (set_local $maskf (i64.add (i64.shr_u (get_local $maskf) (i64.const 1)) (i64.shl (get_local $maske) (i64.const 63))))
        (set_local $maske (i64.add (i64.shr_u (get_local $maske) (i64.const 1)) (i64.shl (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main

  (i64.store (get_local $sp) (get_local $e))
  (i64.store (i32.sub (get_local $sp) (i32.const 8)) (get_local $f))
  (i64.store (i32.sub (get_local $sp) (i32.const 16)) (get_local $g))
  (i64.store (i32.sub (get_local $sp) (i32.const 24)) (get_local $h))
)
(func $callback
  (export "0")
  call $main
)
(func $memset
  (param $ptr i32)
  (param $value i32)
  (param $length i32)
  (result i32)
  (local $i i32)

  (set_local $i (i32.const 0))

  (block $done
    (loop $loop
      (if (i32.ge_u (get_local $i) (get_local $length))
        (br $done)
      )

      (i32.store8 (i32.add (get_local $ptr) (get_local $i)) (get_local $value))

      (set_local $i (i32.add (get_local $i) (i32.const 1)))
      (br $loop)
    )
  )
  (get_local $ptr)
)
(func $bswap_i64
  (param $int i64)
  (result i64)

  (i64.or
    (i64.or
      (i64.or
        (i64.and (i64.shr_u (get_local $int) (i64.const 56)) (i64.const 0xff)) ;; 7 -> 0
        (i64.and (i64.shr_u (get_local $int) (i64.const 40)) (i64.const 0xff00))) ;; 6 -> 1
      (i64.or
        (i64.and (i64.shr_u (get_local $int) (i64.const 24)) (i64.const 0xff0000)) ;; 5 -> 2
        (i64.and (i64.shr_u (get_local $int) (i64.const  8)) (i64.const 0xff000000)))) ;; 4 -> 3
    (i64.or
      (i64.or
        (i64.and (i64.shl (get_local $int) (i64.const 8))   (i64.const 0xff00000000)) ;; 3 -> 4
        (i64.and (i64.shl (get_local $int) (i64.const 24))   (i64.const 0xff0000000000))) ;; 2 -> 5
      (i64.or
        (i64.and (i64.shl (get_local $int) (i64.const 40))   (i64.const 0xff000000000000)) ;; 1 -> 6
        (i64.and (i64.shl (get_local $int) (i64.const 56))   (i64.const 0xff00000000000000)))))) ;; 0 -> 7

(func $iszero_320
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (result i32)

  (i64.eqz (i64.or (i64.or (i64.or (i64.or (get_local 0) (get_local 1)) (get_local 2)) (get_local 3)) (get_local 4)))
)
(func $gte_320
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)
  (param $a4 i64)

  (param $b0 i64)
  (param $b1 i64)
  (param $b2 i64)
  (param $b3 i64)
  (param $b4 i64)

  (result i32)

  ;; a0 > b0 || [a0 == b0 && [a1 > b1 || [a1 == b1 && [a2 > b2 || [a2 == b2 && a3 >= b3 ]]]]
  (i32.or  (i64.gt_u (get_local $a0) (get_local $b0)) ;; a0 > b0
  (i32.and (i64.eq   (get_local $a0) (get_local $b0))
  (i32.or  (i64.gt_u (get_local $a1) (get_local $b1)) ;; a1 > b1
  (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
  (i32.or  (i64.gt_u (get_local $a2) (get_local $b2)) ;; a2 > b2
  (i32.and (i64.eq   (get_local $a2) (get_local $b2))
  (i32.or  (i64.gt_u (get_local $a3) (get_local $b3)) ;; a2 > b2
  (i32.and (i64.eq   (get_local $a3) (get_local $b3))
           (i64.ge_u (get_local $a4) (get_local $b4))))))))))
)
(func $iszero_512
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (result i32)
  (i64.eqz (i64.or (i64.or (i64.or (i64.or (i64.or (i64.or (i64.or (get_local 0) (get_local 1)) (get_local 2)) (get_local 3)) (get_local 4)) (get_local 5)) (get_local 6)) (get_local 7)))
)
(func $gte_512
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)
  (param $a4 i64)
  (param $a5 i64)
  (param $a6 i64)
  (param $a7 i64)

  (param $b0 i64)
  (param $b1 i64)
  (param $b2 i64)
  (param $b3 i64)
  (param $b4 i64)
  (param $b5 i64)
  (param $b6 i64)
  (param $b7 i64)

  (result i32)

  ;; a0 > b0 || [a0 == b0 && [a1 > b1 || [a1 == b1 && [a2 > b2 || [a2 == b2 && a3 >= b3 ]]]]
  (i32.or  (i64.gt_u (get_local $a0) (get_local $b0)) ;; a0 > b0
  (i32.and (i64.eq   (get_local $a0) (get_local $b0))
  (i32.or  (i64.gt_u (get_local $a1) (get_local $b1)) ;; a1 > b1
  (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
  (i32.or  (i64.gt_u (get_local $a2) (get_local $b2)) ;; a2 > b2
  (i32.and (i64.eq   (get_local $a2) (get_local $b2))
  (i32.or  (i64.gt_u (get_local $a3) (get_local $b3)) ;; a3 > b3
  (i32.and (i64.eq   (get_local $a3) (get_local $b3))
  (i32.or  (i64.gt_u (get_local $a4) (get_local $b4)) ;; a4 > b4
  (i32.and (i64.eq   (get_local $a4) (get_local $b4))
  (i32.or  (i64.gt_u (get_local $a5) (get_local $b5)) ;; a5 > b5
  (i32.and (i64.eq   (get_local $a5) (get_local $b5))
  (i32.or  (i64.gt_u (get_local $a6) (get_local $b6)) ;; a6 > b6
  (i32.and (i64.eq   (get_local $a6) (get_local $b6))
           (i64.ge_u (get_local $a7) (get_local $b7)))))))))))))))))

  (func $main
    (export "main")
    (local $jump_dest i32)
    (set_local $jump_dest (i32.const -1))

    (block $done
      (loop $loop
        (block $321 (block $320 (block $319 (block $318 (block $317 (block $316 (block $315 (block $314 (block $313 (block $312 (block $311 (block $310 (block $309 (block $308 (block $307 (block $306 (block $305 (block $304 (block $303 (block $302 (block $301 (block $300 (block $299 (block $298 (block $297 (block $296 (block $295 (block $294 (block $293 (block $292 (block $291 (block $290 (block $289 (block $288 (block $287 (block $286 (block $285 (block $284 (block $283 (block $282 (block $281 (block $280 (block $279 (block $278 (block $277 (block $276 (block $275 (block $274 (block $273 (block $272 (block $271 (block $270 (block $269 (block $268 (block $267 (block $266 (block $265 (block $264 (block $263 (block $262 (block $261 (block $260 (block $259 (block $258 (block $257 (block $256 (block $255 (block $254 (block $253 (block $252 (block $251 (block $250 (block $249 (block $248 (block $247 (block $246 (block $245 (block $244 (block $243 (block $242 (block $241 (block $240 (block $239 (block $238 (block $237 (block $236 (block $235 (block $234 (block $233 (block $232 (block $231 (block $230 (block $229 (block $228 (block $227 (block $226 (block $225 (block $224 (block $223 (block $222 (block $221 (block $220 (block $219 (block $218 (block $217 (block $216 (block $215 (block $214 (block $213 (block $212 (block $211 (block $210 (block $209 (block $208 (block $207 (block $206 (block $205 (block $204 (block $203 (block $202 (block $201 (block $200 (block $199 (block $198 (block $197 (block $196 (block $195 (block $194 (block $193 (block $192 (block $191 (block $190 (block $189 (block $188 (block $187 (block $186 (block $185 (block $184 (block $183 (block $182 (block $181 (block $180 (block $179 (block $178 (block $177 (block $176 (block $175 (block $174 (block $173 (block $172 (block $171 (block $170 (block $169 (block $168 (block $167 (block $166 (block $165 (block $164 (block $163 (block $162 (block $161 (block $160 (block $159 (block $158 (block $157 (block $156 (block $155 (block $154 (block $153 (block $152 (block $151 (block $150 (block $149 (block $148 (block $147 (block $146 (block $145 (block $144 (block $143 (block $142 (block $141 (block $140 (block $139 (block $138 (block $137 (block $136 (block $135 (block $134 (block $133 (block $132 (block $131 (block $130 (block $129 (block $128 (block $127 (block $126 (block $125 (block $124 (block $123 (block $122 (block $121 (block $120 (block $119 (block $118 (block $117 (block $116 (block $115 (block $114 (block $113 (block $112 (block $111 (block $110 (block $109 (block $108 (block $107 (block $106 (block $105 (block $104 (block $103 (block $102 (block $101 (block $100 (block $99 (block $98 (block $97 (block $96 (block $95 (block $94 (block $93 (block $92 (block $91 (block $90 (block $89 (block $88 (block $87 (block $86 (block $85 (block $84 (block $83 (block $82 (block $81 (block $80 (block $79 (block $78 (block $77 (block $76 (block $75 (block $74 (block $73 (block $72 (block $71 (block $70 (block $69 (block $68 (block $67 (block $66 (block $65 (block $64 (block $63 (block $62 (block $61 (block $60 (block $59 (block $58 (block $57 (block $56 (block $55 (block $54 (block $53 (block $52 (block $51 (block $50 (block $49 (block $48 (block $47 (block $46 (block $45 (block $44 (block $43 (block $42 (block $41 (block $40 (block $39 (block $38 (block $37 (block $36 (block $35 (block $34 (block $33 (block $32 (block $31 (block $30 (block $29 (block $28 (block $27 (block $26 (block $25 (block $24 (block $23 (block $22 (block $21 (block $20 (block $19 (block $18 (block $17 (block $16 (block $15 (block $14 (block $13 (block $12 (block $11 (block $10 (block $9 (block $8 (block $7 (block $6 (block $5 (block $4 (block $3 (block $2 (block $1 
  (block $0 
    (if
      (i32.eqz (get_global $init))
      (then
        (set_global $init (i32.const 1))
        (br $0))
      (else
        ;; the callback dest can never be in the first block
        (if (i32.eq (get_global $cb_dest) (i32.const 0)) 
          (then
            (if (i32.eq (get_local $jump_dest) (i32.const 9527))
                (then (br $321))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9495))
                (then (br $320))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9449))
                (then (br $319))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9403))
                (then (br $318))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9357))
                (then (br $317))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9140))
                (then (br $316))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9119))
                (then (br $315))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9098))
                (then (br $314))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9077))
                (then (br $313))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9057))
                (then (br $312))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9052))
                (then (br $311))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 9031))
                (then (br $309))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8996))
                (then (br $308))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8979))
                (then (br $307))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8966))
                (then (br $306))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8934))
                (then (br $305))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8887))
                (then (br $304))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8840))
                (then (br $303))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8793))
                (then (br $302))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8575))
                (then (br $301))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8553))
                (then (br $300))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8531))
                (then (br $299))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8509))
                (then (br $298))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8488))
                (then (br $297))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8479))
                (then (br $296))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8478))
                (then (br $295))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8466))
                (then (br $294))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8465))
                (then (br $293))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8434))
                (then (br $292))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8413))
                (then (br $291))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8384))
                (then (br $290))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8353))
                (then (br $289))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8332))
                (then (br $288))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8303))
                (then (br $287))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8272))
                (then (br $286))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8251))
                (then (br $285))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8222))
                (then (br $284))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8191))
                (then (br $283))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8170))
                (then (br $282))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8141))
                (then (br $281))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8110))
                (then (br $280))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8089))
                (then (br $279))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8060))
                (then (br $278))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8029))
                (then (br $277))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 8008))
                (then (br $276))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7979))
                (then (br $275))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7948))
                (then (br $274))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7927))
                (then (br $273))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7898))
                (then (br $272))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7867))
                (then (br $271))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7846))
                (then (br $270))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7817))
                (then (br $269))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7786))
                (then (br $268))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7765))
                (then (br $267))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7736))
                (then (br $266))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7705))
                (then (br $265))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7684))
                (then (br $264))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7655))
                (then (br $263))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7624))
                (then (br $262))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7603))
                (then (br $261))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7574))
                (then (br $260))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7543))
                (then (br $259))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7522))
                (then (br $258))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7493))
                (then (br $257))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7462))
                (then (br $256))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7441))
                (then (br $255))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7412))
                (then (br $254))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7381))
                (then (br $253))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7360))
                (then (br $252))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7331))
                (then (br $251))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7300))
                (then (br $250))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7279))
                (then (br $249))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7250))
                (then (br $248))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7219))
                (then (br $247))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7198))
                (then (br $246))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7169))
                (then (br $245))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7138))
                (then (br $244))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7117))
                (then (br $243))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7088))
                (then (br $242))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7057))
                (then (br $241))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7036))
                (then (br $240))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 7007))
                (then (br $239))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6976))
                (then (br $238))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6955))
                (then (br $237))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6926))
                (then (br $236))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6895))
                (then (br $235))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6874))
                (then (br $234))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6845))
                (then (br $233))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6814))
                (then (br $232))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6793))
                (then (br $231))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6764))
                (then (br $230))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6733))
                (then (br $229))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6712))
                (then (br $228))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6683))
                (then (br $227))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6652))
                (then (br $226))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6631))
                (then (br $225))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6602))
                (then (br $224))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6571))
                (then (br $223))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6550))
                (then (br $222))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6521))
                (then (br $221))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6490))
                (then (br $220))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6469))
                (then (br $219))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6440))
                (then (br $218))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6409))
                (then (br $217))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6388))
                (then (br $216))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6359))
                (then (br $215))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6328))
                (then (br $214))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6307))
                (then (br $213))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6278))
                (then (br $212))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6247))
                (then (br $211))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6226))
                (then (br $210))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6197))
                (then (br $209))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6166))
                (then (br $208))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6145))
                (then (br $207))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6116))
                (then (br $206))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6085))
                (then (br $205))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6064))
                (then (br $204))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6035))
                (then (br $203))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 6004))
                (then (br $202))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5983))
                (then (br $201))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5954))
                (then (br $200))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5923))
                (then (br $199))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5902))
                (then (br $198))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5873))
                (then (br $197))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5842))
                (then (br $196))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5821))
                (then (br $195))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5792))
                (then (br $194))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5761))
                (then (br $193))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5740))
                (then (br $192))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5711))
                (then (br $191))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5680))
                (then (br $190))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5659))
                (then (br $189))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5630))
                (then (br $188))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5599))
                (then (br $187))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5578))
                (then (br $186))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5549))
                (then (br $185))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5518))
                (then (br $184))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5497))
                (then (br $183))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5468))
                (then (br $182))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5437))
                (then (br $181))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5416))
                (then (br $180))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5387))
                (then (br $179))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5356))
                (then (br $178))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5335))
                (then (br $177))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5306))
                (then (br $176))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5275))
                (then (br $175))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5254))
                (then (br $174))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5225))
                (then (br $173))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5194))
                (then (br $172))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5173))
                (then (br $171))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5144))
                (then (br $170))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5113))
                (then (br $169))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5092))
                (then (br $168))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5063))
                (then (br $167))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5032))
                (then (br $166))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 5011))
                (then (br $165))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4982))
                (then (br $164))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4951))
                (then (br $163))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4930))
                (then (br $162))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4901))
                (then (br $161))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4870))
                (then (br $160))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4849))
                (then (br $159))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4820))
                (then (br $158))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4789))
                (then (br $157))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4768))
                (then (br $156))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4739))
                (then (br $155))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4708))
                (then (br $154))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4687))
                (then (br $153))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4658))
                (then (br $152))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4627))
                (then (br $151))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4606))
                (then (br $150))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4577))
                (then (br $149))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4546))
                (then (br $148))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4525))
                (then (br $147))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4496))
                (then (br $146))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4465))
                (then (br $145))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4444))
                (then (br $144))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4415))
                (then (br $143))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4384))
                (then (br $142))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4363))
                (then (br $141))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4334))
                (then (br $140))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4303))
                (then (br $139))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4282))
                (then (br $138))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4253))
                (then (br $137))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4222))
                (then (br $136))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4201))
                (then (br $135))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4172))
                (then (br $134))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4141))
                (then (br $133))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4120))
                (then (br $132))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4091))
                (then (br $131))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4060))
                (then (br $130))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4039))
                (then (br $129))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4010))
                (then (br $128))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3979))
                (then (br $127))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3958))
                (then (br $126))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3929))
                (then (br $125))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3898))
                (then (br $124))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3877))
                (then (br $123))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3848))
                (then (br $122))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3817))
                (then (br $121))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3796))
                (then (br $120))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3767))
                (then (br $119))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3736))
                (then (br $118))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3715))
                (then (br $117))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3686))
                (then (br $116))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3655))
                (then (br $115))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3634))
                (then (br $114))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3605))
                (then (br $113))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3574))
                (then (br $112))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3553))
                (then (br $111))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3524))
                (then (br $110))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3493))
                (then (br $109))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3472))
                (then (br $108))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3443))
                (then (br $107))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3412))
                (then (br $106))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3391))
                (then (br $105))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3362))
                (then (br $104))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3331))
                (then (br $103))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3310))
                (then (br $102))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3281))
                (then (br $101))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3250))
                (then (br $100))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3229))
                (then (br $99))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3200))
                (then (br $98))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3169))
                (then (br $97))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3148))
                (then (br $96))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3119))
                (then (br $95))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3088))
                (then (br $94))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3067))
                (then (br $93))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3038))
                (then (br $92))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3007))
                (then (br $91))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2986))
                (then (br $90))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2957))
                (then (br $89))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2926))
                (then (br $88))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2905))
                (then (br $87))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2876))
                (then (br $86))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2845))
                (then (br $85))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2824))
                (then (br $84))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2795))
                (then (br $83))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2764))
                (then (br $82))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2743))
                (then (br $81))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2714))
                (then (br $80))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2683))
                (then (br $79))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2662))
                (then (br $78))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2633))
                (then (br $77))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2602))
                (then (br $76))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2581))
                (then (br $75))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2552))
                (then (br $74))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2521))
                (then (br $73))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2500))
                (then (br $72))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2471))
                (then (br $71))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2440))
                (then (br $70))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2419))
                (then (br $69))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2390))
                (then (br $68))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2359))
                (then (br $67))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2338))
                (then (br $66))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2309))
                (then (br $65))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2278))
                (then (br $64))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2257))
                (then (br $63))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2228))
                (then (br $62))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2197))
                (then (br $61))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2176))
                (then (br $60))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2147))
                (then (br $59))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2116))
                (then (br $58))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2095))
                (then (br $57))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2066))
                (then (br $56))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2035))
                (then (br $55))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2014))
                (then (br $54))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1985))
                (then (br $53))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1954))
                (then (br $52))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1933))
                (then (br $51))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1904))
                (then (br $50))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1873))
                (then (br $49))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1852))
                (then (br $48))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1823))
                (then (br $47))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1792))
                (then (br $46))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1771))
                (then (br $45))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1742))
                (then (br $44))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1711))
                (then (br $43))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1690))
                (then (br $42))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1661))
                (then (br $41))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1630))
                (then (br $40))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1609))
                (then (br $39))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1580))
                (then (br $38))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1549))
                (then (br $37))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1528))
                (then (br $36))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1499))
                (then (br $35))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1468))
                (then (br $34))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1447))
                (then (br $33))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1418))
                (then (br $32))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1387))
                (then (br $31))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1366))
                (then (br $30))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1337))
                (then (br $29))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1306))
                (then (br $28))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1285))
                (then (br $27))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1256))
                (then (br $26))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1225))
                (then (br $25))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1204))
                (then (br $24))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1175))
                (then (br $23))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1144))
                (then (br $22))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1123))
                (then (br $21))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1094))
                (then (br $20))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1063))
                (then (br $19))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1042))
                (then (br $18))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1013))
                (then (br $17))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 982))
                (then (br $16))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 961))
                (then (br $15))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 932))
                (then (br $14))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 901))
                (then (br $13))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 880))
                (then (br $12))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 851))
                (then (br $11))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 820))
                (then (br $10))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 799))
                (then (br $9))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 770))
                (then (br $8))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 739))
                (then (br $7))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 718))
                (then (br $6))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 678))
                (then (br $5))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 37))
                (then (br $4))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 27))
                (then (br $3))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 17))
                (then (br $2))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 16))
                (then (br $1))
                (else (unreachable
          )
          (else 
            ;; return callback destination and zero out $cb_dest 
            get_global $cb_dest
            (set_global $cb_dest (i32.const 0))
            (br_table $0  $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 $32 $33 $34 $35 $36 $37 $38 $39 $40 $41 $42 $43 $44 $45 $46 $47 $48 $49 $50 $51 $52 $53 $54 $55 $56 $57 $58 $59 $60 $61 $62 $63 $64 $65 $66 $67 $68 $69 $70 $71 $72 $73 $74 $75 $76 $77 $78 $79 $80 $81 $82 $83 $84 $85 $86 $87 $88 $89 $90 $91 $92 $93 $94 $95 $96 $97 $98 $99 $100 $101 $102 $103 $104 $105 $106 $107 $108 $109 $110 $111 $112 $113 $114 $115 $116 $117 $118 $119 $120 $121 $122 $123 $124 $125 $126 $127 $128 $129 $130 $131 $132 $133 $134 $135 $136 $137 $138 $139 $140 $141 $142 $143 $144 $145 $146 $147 $148 $149 $150 $151 $152 $153 $154 $155 $156 $157 $158 $159 $160 $161 $162 $163 $164 $165 $166 $167 $168 $169 $170 $171 $172 $173 $174 $175 $176 $177 $178 $179 $180 $181 $182 $183 $184 $185 $186 $187 $188 $189 $190 $191 $192 $193 $194 $195 $196 $197 $198 $199 $200 $201 $202 $203 $204 $205 $206 $207 $208 $209 $210 $211 $212 $213 $214 $215 $216 $217 $218 $219 $220 $221 $222 $223 $224 $225 $226 $227 $228 $229 $230 $231 $232 $233 $234 $235 $236 $237 $238 $239 $240 $241 $242 $243 $244 $245 $246 $247 $248 $249 $250 $251 $252 $253 $254 $255 $256 $257 $258 $259 $260 $261 $262 $263 $264 $265 $266 $267 $268 $269 $270 $271 $272 $273 $274 $275 $276 $277 $278 $279 $280 $281 $282 $283 $284 $285 $286 $287 $288 $289 $290 $291 $292 $293 $294 $295 $296 $297 $298 $299 $300 $301 $302 $303 $304 $305 $306 $307 $308 $309 $310 $311 $312 $313 $314 $315 $316 $317 $318 $319 $320 $321)
          )))))(call $useGas (i64.const 25)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 1)) )(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 27))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8979))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 37))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8979))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 740)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 512))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 512))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65535))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10923))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8478))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 52)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 770))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 718))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 739))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 851))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 799))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 820))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 932))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 880))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 901))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1013))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 961))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 982))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1094))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1042))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1063))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1175))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1123))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1144))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1256))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1204))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1225))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1337))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1285))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1306))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1418))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1366))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1387))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1499))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1447))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1468))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1580))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1528))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1549))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1661))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1609))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1630))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1742))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1690))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1711))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1823))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1771))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1792))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1904))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1852))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1873))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1985))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1933))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1954))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2066))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2014))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2035))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2147))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2095))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2116))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2228))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2176))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2197))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2309))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2257))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2278))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2390))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2338))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2359))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2471))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2419))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2440))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2552))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2500))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2521))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2633))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2581))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2602))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2714))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2662))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2683))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2795))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2743))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2764))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2876))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2824))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2845))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2957))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2905))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2926))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3038))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2986))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3007))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3119))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3067))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3088))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3200))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3148))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3169))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3281))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3229))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3250))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3362))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3310))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3331))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3443))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3391))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3412))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3524))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3472))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3493))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3605))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3553))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3574))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3686))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3634))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3767))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3715))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3736))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3848))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3796))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3817))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3929))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3877))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3898))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4010))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3958))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3979))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4091))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4039))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4060))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4172))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4120))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4141))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4253))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4201))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4222))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4334))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4282))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4303))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4415))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4363))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4384))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4496))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4444))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4465))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4577))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4525))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4546))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4658))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4606))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4627))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4739))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4687))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4708))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4820))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4768))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4789))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4901))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4849))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4870))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4982))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4930))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4951))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5063))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5011))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5032))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5144))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5092))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5113))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5225))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5173))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5194))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5306))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5254))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5275))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5387))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5335))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5356))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5468))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5416))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5437))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5549))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5497))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5518))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5630))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5578))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5599))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5711))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5659))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5680))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5792))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5740))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5761))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5873))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5821))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5842))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5954))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5902))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5923))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6035))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5983))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6004))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6116))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6064))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6085))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6197))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6145))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6166))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6278))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6226))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6247))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6359))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6307))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6328))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6440))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6388))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6409))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6521))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6469))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6490))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6602))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6550))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6571))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6683))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6631))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6652))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6764))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6712))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6733))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6845))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6793))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6814))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6926))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6874))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6895))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7007))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6955))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6976))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7088))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7036))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7057))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7169))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7117))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7138))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7250))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7198))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7219))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7331))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7279))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7300))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7412))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7360))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7381))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7493))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7441))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7462))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7574))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7522))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7543))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7603))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7624))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7736))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7684))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7705))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7817))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7765))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7786))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7898))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7846))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7867))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7979))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7927))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7948))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8060))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8008))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8029))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8141))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8089))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8110))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8222))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 15))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8170))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8191))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8303))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 6))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8251))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8272))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8384))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 13))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 11))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8332))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 7))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8353))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8465))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 14))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 5))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8413))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8434))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8488))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 10))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 678))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 18)) (if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9031))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 47)) (if (i32.gt_s (get_global $sp) (i32.const 32448)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8509))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8531))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8553))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8575))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 349)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1099511627776))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16777216))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710656))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65536))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -9223372036854775808))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8793))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8840))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8887))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8934))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 31)) (if (i32.lt_s (get_global $sp) (i32.const 320)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 512))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
)(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 8996))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 18)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 16)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 537))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 9047))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CODECOPY (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(set_global $cb_dest (i32.const 310))
          (br $done))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $RETURN) (br $done)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
)(call $useGas (i64.const 7)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 47)) (if (i32.gt_s (get_global $sp) (i32.const 32448)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 30))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 51))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 72))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 93))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 349)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1099511627776))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16777216))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281474976710656))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 65536))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADDMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 1)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MULMOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -9223372036854775808))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 310))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 10))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 356))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 402))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 80)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 11))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 448))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const -1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 31)) (if (i32.lt_s (get_global $sp) (i32.const 320)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))))
)