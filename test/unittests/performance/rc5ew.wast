
(module
  (global $gasUsed (mut i64) (i64.const 0))
  (func $useGas (param $gas i64)
    get_global $gasUsed  
    get_local $gas
    i64.add
    set_global $gasUsed
  )
  (global $cb_dest (mut i32) (i32.const 0))
  (global $sp (mut i32) (i32.const -32))
  (global $init (mut i32) (i32.const 0))

  ;; memory related global
  (global $memstart i32  (i32.const 33832))
  ;; the number of 256 words stored in memory
  (global $wordCount (mut i64) (i64.const 0))
  ;; what was charged for the last memory allocation
  (global $prevMemCost (mut i64) (i64.const 0))

  ;; TODO: memory should only be 1, but can't resize right now
  (memory 500)
  (export "memory" (memory 0))

  (table
    (export "callback")
    anyfunc
    (elem $callback)
  )
   (func $PUSH
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)
  (local $sp i32)

  ;; increament stack pointer
  (set_local $sp (i32.add (get_global $sp) (i32.const 32)))
  (i64.store (get_local $sp) (get_local $a3))
  (i64.store (i32.add (get_local $sp) (i32.const 8)) (get_local $a2))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $a1))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a0))
)
;; stack:
;;  0: word
;; -1: offset
(func $MSTORE
  (local $sp i32)

  (local $offset   i32)
  
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (set_local $offset0 (i64.load          (get_global $sp)))
  (set_local $offset1 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $offset2 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $offset3 (i64.load (i32.add (get_global $sp) (i32.const 24))))

  (set_local $offset 
             (call $check_overflow (get_local $offset0)
                                   (get_local $offset1)
                                   (get_local $offset2)
                                   (get_local $offset3)))
  ;; subtrace gas useage
  (call $memusegas (get_local $offset) (i32.const 32))

  ;; pop itme from the stack
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  ;; swap top stack item
  (call $bswap_m256 (get_local $sp))
  drop

  (set_local $offset (i32.add (get_local $offset) (get_global $memstart)))
  ;; store word to memory
  (i64.store          (get_local $offset)                 (i64.load          (get_local $sp)))
  (i64.store (i32.add (get_local $offset) (i32.const 8))  (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (i64.store (i32.add (get_local $offset) (i32.const 16)) (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (i64.store (i32.add (get_local $offset) (i32.const 24)) (i64.load (i32.add (get_local $sp) (i32.const 24))))
)
;; generated by ./wasm/generateInterface.js
(func $CALLVALUE   
    ;; zero out mem
    (i64.store (i32.add (get_global $sp) (i32.const 56)) (i64.const 0))
    (i64.store (i32.add (get_global $sp) (i32.const 48)) (i64.const 0))(call $bswap_m128 (i32.add (i32.const 32)(get_global $sp))) drop)(func $ISZERO
  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_global $sp)))

  (i64.store (get_global $sp)
    (i64.extend_u/i32
      (call $iszero_256 (get_local $a0) (get_local $a1) (get_local $a2) (get_local $a3))
    )
  )

  ;; zero out the rest of memory
  (i64.store (i32.add (get_global $sp) (i32.const 8)) (i64.const 0))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.const 0))
)
(func $check_overflow
  (param $a i64)
  (param $b i64)
  (param $c i64)
  (param $d i64)
  (result i32)

  (local $MAX_INT i32)
  (set_local $MAX_INT (i32.const -1))

  (if
    (i32.and 
      (i32.and 
        (i64.eqz  (get_local $d))
        (i64.eqz  (get_local $c)))
      (i32.and 
        (i64.eqz  (get_local $b))
        (i64.lt_u (get_local $a) (i64.extend_u/i32 (get_local $MAX_INT)))))
     (return (i32.wrap/i64 (get_local $a))))

     (return (get_local $MAX_INT)))
(func $DUP
  (param $a0 i32)
  (local $sp i32)

  (local $sp_ref i32)
  
  (set_local $sp (i32.add (get_global $sp) (i32.const 32)))
  (set_local $sp_ref (i32.sub (i32.sub (get_local $sp) (i32.const 8)) (i32.mul (get_local $a0) (i32.const 32))))
  
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.load (get_local $sp_ref)))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 8))))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 16))))
  (i64.store          (get_local $sp)                 (i64.load (i32.sub (get_local $sp_ref) (i32.const 24))))
)
;; stack:
;;  0: offset
(func $MLOAD
  (local $offset i32)
  (local $offset0 i64)
  (local $offset1 i64)
  (local $offset2 i64)
  (local $offset3 i64)

  ;; load args from the stack
  (set_local $offset0 (i64.load          (get_global $sp)))
  (set_local $offset1 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $offset2 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $offset3 (i64.load (i32.add (get_global $sp) (i32.const 24))))

  (set_local $offset 
             (call $check_overflow (get_local $offset0)
                                   (get_local $offset1)
                                   (get_local $offset2)
                                   (get_local $offset3)))
  ;; subttract gas useage
  (call $memusegas (get_local $offset) (i32.const  32))

  ;; FIXME: how to deal with overflow?
  (set_local $offset (i32.add (get_local $offset) (get_global $memstart)))

  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.load (i32.add (get_local $offset) (i32.const 24))))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.load (i32.add (get_local $offset) (i32.const 16))))
  (i64.store (i32.add (get_global $sp) (i32.const  8)) (i64.load (i32.add (get_local $offset) (i32.const  8))))
  (i64.store          (get_global $sp)                 (i64.load          (get_local $offset)))

  ;; swap
  (call $bswap_m256 (get_global $sp))
  drop
)
(func $SWAP
  (param $a0 i32)
  (local $sp_ref i32)

  (local $topa i64)
  (local $topb i64)
  (local $topc i64)
  (local $topd i64)
  
  (set_local $sp_ref (i32.sub (i32.add  (get_global $sp) (i32.const 24)) (i32.mul (i32.add (get_local $a0) (i32.const 1)) (i32.const 32))))

  (set_local $topa (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $topb (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $topc (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $topd (i64.load          (get_global $sp)))
  
  ;; replace the top element
  (i64.store (i32.add (get_global $sp) (i32.const 24)) (i64.load (get_local $sp_ref)))
  (i64.store (i32.add (get_global $sp) (i32.const 16)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 8))))
  (i64.store (i32.add (get_global $sp) (i32.const  8)) (i64.load (i32.sub (get_local $sp_ref) (i32.const 16))))
  (i64.store          (get_global $sp)                 (i64.load (i32.sub (get_local $sp_ref) (i32.const 24))))

  ;; store the old top element
  (i64.store (get_local $sp_ref)                          (get_local $topa))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 8))  (get_local $topb))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 16)) (get_local $topc))
  (i64.store (i32.sub (get_local $sp_ref) (i32.const 24)) (get_local $topd))
)
(func $ADD
  (local $sp i32)

  (local $a i64)
  (local $c i64)
  (local $d i64)
  (local $carry i64)

  (set_local $sp (get_global $sp))
  
  ;; d c b a
  ;; pop the stack 
  (set_local $a (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d (i64.load (get_local $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_local $sp) (i32.const 8)))

  ;; d 
  (set_local $carry (i64.add (get_local $d) (i64.load (i32.sub (get_local $sp) (i32.const 24)))))
  ;; save d  to mem
  (i64.store (i32.sub (get_local $sp) (i32.const 24)) (get_local $carry))
  ;; check  for overflow
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $carry) (get_local $d))))

  ;; c use $d as reg
  (set_local $d     (i64.add (i64.load (i32.sub (get_local $sp) (i32.const 16))) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $carry))))
  (set_local $d     (i64.add (get_local $c) (get_local $d)))
  ;; store the result
  (i64.store (i32.sub (get_local $sp) (i32.const 16)) (get_local $d))
  ;; check overflow
  (set_local $carry (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $d) (get_local $c))) (get_local $carry)))

  ;; b
  ;; add carry
  (set_local $d     (i64.add (i64.load (i32.sub (get_local $sp) (i32.const 8))) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $carry))))

  ;; use reg c
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $d (i64.add (get_local $c) (get_local $d)))
  (i64.store (i32.sub (get_local $sp) (i32.const 8)) (get_local $d))
  ;; a
  (i64.store (get_local $sp) 
             (i64.add        ;; add a 
               (get_local $a)
               (i64.add
                 (i64.load (get_local $sp))  ;; load the operand
                 (i64.or  ;; carry 
                   (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $c))) 
                   (get_local $carry)))))
)
(func $AND
  (i64.store (i32.sub (get_global $sp) (i32.const 8))  (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 8)))  (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const 8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.and (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load (get_global $sp))))
)
(func $MUL
  (call $mul_256
        (i64.load (i32.add (get_global $sp) (i32.const 24)))
        (i64.load (i32.add (get_global $sp) (i32.const 16)))
        (i64.load (i32.add (get_global $sp) (i32.const  8)))
        (i64.load          (get_global $sp))
        (i64.load (i32.sub (get_global $sp) (i32.const  8)))
        (i64.load (i32.sub (get_global $sp) (i32.const 16)))
        (i64.load (i32.sub (get_global $sp) (i32.const 24)))
        (i64.load (i32.sub (get_global $sp) (i32.const 32)))
        (i32.sub (get_global $sp) (i32.const 8))
  )
)
(func $OR
  (i64.store (i32.sub (get_global $sp) (i32.const  8)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const  8))) (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const  8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.or (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load          (get_global $sp))))
)
(func $DIV
  (local $sp i32)
  ;; dividend
  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  ;; divisor
  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $carry i32)
  (local $temp  i64)
  (local $temp2  i64)

  (set_local $sp (get_global $sp))
  (set_local $maskd (i64.const 1))

  ;; load args from the stack
  (set_local $a (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $d1 (i64.load (get_local $sp)))

  (block $main
    ;; check div by 0
    (if (call $iszero_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
      (br $main)
    )

    ;; align bits
    (block $done
      (loop $loop
        ;; align bits;
        (if 
          ;; check to make sure we are not overflowing
          (i32.or (i64.eqz (i64.clz (get_local $a1)))
          ;;  divisor < dividend
          (call $gte_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $a) (get_local $b) (get_local $c) (get_local $d)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.shl (get_local $d1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.shl (get_local $maskd) (i64.const 1)))

        (br $loop)
      )
    )


    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_256 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_256 (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $d) (get_local $d1)))
            (set_local $d     (i64.sub  (get_local $d) (get_local $d1)))
            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))
            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))
            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))

            ;; result = result + mask
            (set_local $dq   (i64.add (get_local $maskd) (get_local $dq)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $dq) (get_local $maskd))))
            (set_local $cq   (i64.add (get_local $cq) (get_local $temp)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $cq) (get_local $temp))))
            (set_local $cq   (i64.add (get_local $maskc) (get_local $cq)))
            (set_local $temp (i64.or (i64.extend_u/i32  (i64.lt_u (get_local $cq) (get_local $maskc))) (get_local $temp)))
            (set_local $bq   (i64.add (get_local $bq) (get_local $temp)))
            (set_local $temp (i64.extend_u/i32 (i64.lt_u (get_local $bq) (get_local $temp))))
            (set_local $bq   (i64.add (get_local $maskb) (get_local $bq)))
            (set_local $aq   (i64.add (get_local $maska) (i64.add (get_local $aq) (i64.or (i64.extend_u/i32 (i64.lt_u (get_local $bq) (get_local $maskb))) (get_local $temp)))))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $aq))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $bq))
  (i64.store (i32.add (get_local $sp) (i32.const 8))  (get_local $cq))
  (i64.store (get_local $sp) (get_local $dq))
)
(func $SLT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_global $sp)))

  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $b0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $b2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $b3 (i64.load (get_local $sp)))

  (i64.store (get_local $sp) (i64.extend_u/i32 
    (i32.or  (i64.lt_s (get_local $a0) (get_local $b0)) ;; a0 < b0
    (i32.and (i64.eq   (get_local $a0) (get_local $b0)) ;; a0 == b0
    (i32.or  (i64.lt_u (get_local $a1) (get_local $b1)) ;; a1 < b1
    (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
    (i32.or  (i64.lt_u (get_local $a2) (get_local $b2)) ;; a2 < b2
    (i32.and (i64.eq   (get_local $a2) (get_local $b2)) ;; a2 == b2
             (i64.lt_u (get_local $a3) (get_local $b3)))))))))) ;; a3 < b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.const 0))
)
(func $LT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  (set_local $sp (get_global $sp))

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $b0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $b2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $b3 (i64.load (get_local $sp)))

  (i64.store (get_local $sp) (i64.extend_u/i32 
    (i32.or  (i64.lt_u (get_local $a0) (get_local $b0)) ;; a0 < b0
    (i32.and (i64.eq   (get_local $a0) (get_local $b0)) ;; a0 == b0
    (i32.or  (i64.lt_u (get_local $a1) (get_local $b1)) ;; a1 < b1
    (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
    (i32.or  (i64.lt_u (get_local $a2) (get_local $b2)) ;; a2 < b2
    (i32.and (i64.eq   (get_local $a2) (get_local $b2)) ;; a2 == b2
             (i64.lt_u (get_local $a3) (get_local $b3)))))))))) ;; a3 < b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.const 0))
)
(func $SUB
  (local $sp i32)

  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  (local $carry i64)
  (local $temp i64)

  (set_local $a (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $d (i64.load          (get_global $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $d1 (i64.load          (get_local $sp)))

  ;; a * 64^3 + b*64^2 + c*64 + d 
  ;; d
  (set_local $carry (i64.extend_u/i32 (i64.lt_u (get_local $d) (get_local $d1))))
  (set_local $d (i64.sub (get_local $d) (get_local $d1)))

  ;; c
  (set_local $temp (i64.sub (get_local $c) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.gt_u (get_local $temp) (get_local $c))))
  (set_local $c (i64.sub (get_local $temp) (get_local $c1)))
  (set_local $carry (i64.or (i64.extend_u/i32 (i64.gt_u (get_local $c) (get_local $temp))) (get_local $carry)))

  ;; b
  (set_local $temp (i64.sub (get_local $b) (get_local $carry)))
  (set_local $carry (i64.extend_u/i32 (i64.gt_u (get_local $temp) (get_local $b))))
  (set_local $b (i64.sub (get_local $temp) (get_local $b1)))

  ;; a
  (set_local $a (i64.sub (i64.sub (get_local $a) (i64.or (i64.extend_u/i32 (i64.gt_u (get_local $b) (get_local $temp))) (get_local $carry))) (get_local $a1)))

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $b))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (get_local $c))
  (i64.store          (get_local $sp)                 (get_local $d))
)
(func $SGT
  (local $sp i32)

  (local $a0 i64)
  (local $a1 i64)
  (local $a2 i64)
  (local $a3 i64)
  (local $b0 i64)
  (local $b1 i64)
  (local $b2 i64)
  (local $b3 i64)

  ;; load args from the stack
  (set_local $a0 (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $a1 (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $a2 (i64.load (i32.add (get_global $sp) (i32.const 8))))
  (set_local $a3 (i64.load (get_global $sp)))

  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $b0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $b2 (i64.load (i32.add (get_local $sp) (i32.const 8))))
  (set_local $b3 (i64.load (get_local $sp)))

  (i64.store (get_local $sp) (i64.extend_u/i32 
    (i32.or  (i64.gt_s (get_local $a0) (get_local $b0)) ;; a0 > b0
    (i32.and (i64.eq   (get_local $a0) (get_local $b0)) ;; a0 == a1
    (i32.or  (i64.gt_u (get_local $a1) (get_local $b1)) ;; a1 > b1
    (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
    (i32.or  (i64.gt_u (get_local $a2) (get_local $b2)) ;; a2 > b2
    (i32.and (i64.eq   (get_local $a2) (get_local $b2)) ;; a2 == b2
             (i64.gt_u (get_local $a3) (get_local $b3)))))))))) ;; a3 > b3

  ;; zero  out the rest of the stack item
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.const 0))
)
(func $MOD
  (local $sp i32)

  ;; dividend
  (local $a i64)
  (local $b i64)
  (local $c i64)
  (local $d i64)

  ;; divisor
  (local $a1 i64)
  (local $b1 i64)
  (local $c1 i64)
  (local $d1 i64)

  ;; quotient
  (local $aq i64)
  (local $bq i64)
  (local $cq i64)
  (local $dq i64)

  ;; mask
  (local $maska i64)
  (local $maskb i64)
  (local $maskc i64)
  (local $maskd i64)
  (local $carry i32)
  (local $temp i64)

  (set_local $maskd (i64.const 1))

  ;; load args from the stack
  (set_local $a (i64.load (i32.add (get_global $sp) (i32.const 24))))
  (set_local $b (i64.load (i32.add (get_global $sp) (i32.const 16))))
  (set_local $c (i64.load (i32.add (get_global $sp) (i32.const  8))))
  (set_local $d (i64.load          (get_global $sp)))
  ;; decement the stack pointer
  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))

  (set_local $a1 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $b1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $c1 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $d1 (i64.load          (get_local $sp)))


  (block $main
    ;; check div by 0
    (if (call $iszero_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
      (then
        (set_local $a (i64.const 0))
        (set_local $b (i64.const 0))
        (set_local $c (i64.const 0))
        (set_local $d (i64.const 0))
        (br $main)
      )
    )

    ;; align bits
    (block $done
        (loop $loop
        ;; align bits;
        (if (i32.or (i64.eqz (i64.clz (get_local $a1))) (call $gte_256 (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1) (get_local $a) (get_local $b) (get_local $c) (get_local $d)))
          (br $done)
        )

        ;; divisor = divisor << 1
        (set_local $a1 (i64.add (i64.shl (get_local $a1) (i64.const 1)) (i64.shr_u (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shl (get_local $b1) (i64.const 1)) (i64.shr_u (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shl (get_local $c1) (i64.const 1)) (i64.shr_u (get_local $d1) (i64.const 63))))
        (set_local $d1 (i64.shl (get_local $d1) (i64.const 1)))

        ;; mask = mask << 1
        (set_local $maska (i64.add (i64.shl (get_local $maska) (i64.const 1)) (i64.shr_u (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shl (get_local $maskb) (i64.const 1)) (i64.shr_u (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shl (get_local $maskc) (i64.const 1)) (i64.shr_u (get_local $maskd) (i64.const 63))))
        (set_local $maskd (i64.shl (get_local $maskd) (i64.const 1)))

        (br $loop)
      )
    )

    (block $done
      (loop $loop
        ;; loop while mask != 0
        (if (call $iszero_256 (get_local $maska) (get_local $maskb) (get_local $maskc) (get_local $maskd))
          (br $done)
        )
        ;; if dividend >= divisor
        (if (call $gte_256 (get_local $a) (get_local $b) (get_local $c) (get_local $d) (get_local $a1) (get_local $b1) (get_local $c1) (get_local $d1))
          (then
            ;; dividend = dividend - divisor
            (set_local $carry (i64.lt_u (get_local $d) (get_local $d1)))
            (set_local $d     (i64.sub  (get_local $d) (get_local $d1)))
            (set_local $temp  (i64.sub  (get_local $c) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $c)))
            (set_local $c     (i64.sub  (get_local $temp) (get_local $c1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $c) (get_local $temp)) (get_local $carry)))
            (set_local $temp  (i64.sub  (get_local $b) (i64.extend_u/i32 (get_local $carry))))
            (set_local $carry (i64.gt_u (get_local $temp) (get_local $b)))
            (set_local $b     (i64.sub  (get_local $temp) (get_local $b1)))
            (set_local $carry (i32.or   (i64.gt_u (get_local $b) (get_local $temp)) (get_local $carry)))
            (set_local $a     (i64.sub  (i64.sub (get_local $a) (i64.extend_u/i32 (get_local $carry))) (get_local $a1)))
          )
        )
        ;; divisor = divisor >> 1
        (set_local $d1 (i64.add (i64.shr_u (get_local $d1) (i64.const 1)) (i64.shl (get_local $c1) (i64.const 63))))
        (set_local $c1 (i64.add (i64.shr_u (get_local $c1) (i64.const 1)) (i64.shl (get_local $b1) (i64.const 63))))
        (set_local $b1 (i64.add (i64.shr_u (get_local $b1) (i64.const 1)) (i64.shl (get_local $a1) (i64.const 63))))
        (set_local $a1 (i64.shr_u (get_local $a1) (i64.const 1)))

        ;; mask = mask >> 1
        (set_local $maskd (i64.add (i64.shr_u (get_local $maskd) (i64.const 1)) (i64.shl (get_local $maskc) (i64.const 63))))
        (set_local $maskc (i64.add (i64.shr_u (get_local $maskc) (i64.const 1)) (i64.shl (get_local $maskb) (i64.const 63))))
        (set_local $maskb (i64.add (i64.shr_u (get_local $maskb) (i64.const 1)) (i64.shl (get_local $maska) (i64.const 63))))
        (set_local $maska (i64.shr_u (get_local $maska) (i64.const 1)))
        (br $loop)
      )
    )
  );; end of main

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $a))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $b))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (get_local $c))
  (i64.store          (get_local $sp)                 (get_local $d))
)
(func $EQ
  (local  $sp i32)

  (set_local $sp (i32.sub (get_global $sp) (i32.const 32)))
  (i64.store (get_local $sp)
    (i64.extend_u/i32
      (i32.and (i64.eq   (i64.load (i32.add (get_local $sp) (i32.const 56))) (i64.load (i32.add (get_local $sp) (i32.const 24))))
      (i32.and (i64.eq   (i64.load (i32.add (get_local $sp) (i32.const 48))) (i64.load (i32.add (get_local $sp) (i32.const 16))))
      (i32.and (i64.eq   (i64.load (i32.add (get_local $sp) (i32.const 40))) (i64.load (i32.add (get_local $sp) (i32.const  8))))
               (i64.eq   (i64.load (i32.add (get_local $sp) (i32.const 32))) (i64.load          (get_local $sp))))))))

  (i64.store (i32.add (get_local $sp) (i32.const 24)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (i64.const 0))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (i64.const 0))
)
(func $XOR
  (i64.store (i32.sub (get_global $sp) (i32.const  8)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const  8))) (i64.load (i32.add (get_global $sp) (i32.const 24)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 16)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 16))) (i64.load (i32.add (get_global $sp) (i32.const 16)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 24)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 24))) (i64.load (i32.add (get_global $sp) (i32.const  8)))))
  (i64.store (i32.sub (get_global $sp) (i32.const 32)) (i64.xor (i64.load (i32.sub (get_global $sp) (i32.const 32))) (i64.load (i32.add (get_global $sp) (i32.const  0)))))
)
(func $EXP
  (local $sp i32)

  ;; base
  (local $base0 i64)
  (local $base1 i64)
  (local $base2 i64)
  (local $base3 i64)

  ;; exp
  (local $exp0 i64)
  (local $exp1 i64)
  (local $exp2 i64)
  (local $exp3 i64)

  (local $r0 i64)
  (local $r1 i64)
  (local $r2 i64)
  (local $r3 i64)

  (local $gasCounter f32)
  (set_local $sp (get_global $sp))

  ;; load args from the stack
  (set_local $base0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $base1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $base2 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $base3 (i64.load          (get_local $sp)))

  (set_local $sp (i32.sub (get_local $sp) (i32.const 32)))

  (set_local $exp0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
  (set_local $exp1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
  (set_local $exp2 (i64.load (i32.add (get_local $sp) (i32.const  8))))
  (set_local $exp3 (i64.load          (get_local $sp)))

  ;; let result = new BN[1]
  (set_local $r3 (i64.const 1))

  (block $done
    (loop $loop
       ;; while [exp > 0] {
      (if (call $iszero_256 (get_local $exp0) (get_local $exp1) (get_local $exp2) (get_local $exp3))
        (br $done) 
      )

      ;; if[exp.modn[2] === 1]
      ;; is odd?
      (if (i64.eqz (i64.ctz (get_local $exp3)))

        ;; result = result.mul[base].mod[TWO_POW256]
        ;; r = r * a
        (then
          (call $mul_256 (get_local $r0) (get_local $r1) (get_local $r2) (get_local $r3) (get_local $base0) (get_local $base1) (get_local $base2) (get_local $base3) (i32.add (get_local $sp) (i32.const 24)))
          (set_local $r0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
          (set_local $r1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
          (set_local $r2 (i64.load (i32.add (get_local $sp) (i32.const  8))))
          (set_local $r3 (i64.load          (get_local $sp)))
        )
      )
      ;; exp = exp.shrn 1
      (set_local $exp3 (i64.add (i64.shr_u (get_local $exp3) (i64.const 1)) (i64.shl (get_local $exp2) (i64.const 63))))
      (set_local $exp2 (i64.add (i64.shr_u (get_local $exp2) (i64.const 1)) (i64.shl (get_local $exp1) (i64.const 63))))
      (set_local $exp1 (i64.add (i64.shr_u (get_local $exp1) (i64.const 1)) (i64.shl (get_local $exp0) (i64.const 63))))
      (set_local $exp0 (i64.shr_u (get_local $exp0) (i64.const 1)))

      ;; base = base.mulr[baser].modr[TWO_POW256]
      (call $mul_256 (get_local $base0) (get_local $base1) (get_local $base2) (get_local $base3) (get_local $base0) (get_local $base1) (get_local $base2) (get_local $base3) (i32.add (get_local $sp) (i32.const 24)))
      (set_local $base0 (i64.load (i32.add (get_local $sp) (i32.const 24))))
      (set_local $base1 (i64.load (i32.add (get_local $sp) (i32.const 16))))
      (set_local $base2 (i64.load (i32.add (get_local $sp) (i32.const  8))))
      (set_local $base3 (i64.load          (get_local $sp)))

      (set_local $gasCounter (f32.add (get_local $gasCounter) (f32.const 1)))
      (br $loop)
    )
  ) 

  ;; use gas
  ;; Log256[Exponent] * 10
  (call $useGas (i64.extend_u/i32 (i32.mul (i32.const 10) (i32.trunc_s/f32 
                         (f32.ceil (f32.div (get_local $gasCounter) (f32.const 8)))))))

  ;; decement the stack pointer
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $r0))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $r1))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (get_local $r2))
  (i64.store          (get_local $sp)                 (get_local $r3))
)
;; generated by ./wasm/generateInterface.js
(func $CODECOPY (param $callback i32)(local $offset0 i32)(local $length0 i32) (set_local $offset0 
    (call $check_overflow
      (i64.load (i32.add (get_global $sp) (i32.const 0)))
      (i64.load (i32.add (get_global $sp) (i32.const 8)))
      (i64.load (i32.add (get_global $sp) (i32.const 16)))
      (i64.load (i32.add (get_global $sp) (i32.const 24)))))(set_local $length0 
    (call $check_overflow 
      (i64.load (i32.add (get_global $sp) (i32.const -64)))
      (i64.load (i32.add (get_global $sp) (i32.const -56)))
      (i64.load (i32.add (get_global $sp) (i32.const -48)))
      (i64.load (i32.add (get_global $sp) (i32.const -40)))))

    (call $memusegas (get_local $offset0) (get_local $length0))
    (set_local $offset0 (i32.add (get_global $memstart) (get_local $offset0))));; generated by ./wasm/generateInterface.js
(func $RETURN (local $offset0 i32)(local $length0 i32) (set_local $offset0 
    (call $check_overflow
      (i64.load (i32.add (get_global $sp) (i32.const 0)))
      (i64.load (i32.add (get_global $sp) (i32.const 8)))
      (i64.load (i32.add (get_global $sp) (i32.const 16)))
      (i64.load (i32.add (get_global $sp) (i32.const 24)))))(set_local $length0 
    (call $check_overflow 
      (i64.load (i32.add (get_global $sp) (i32.const -32)))
      (i64.load (i32.add (get_global $sp) (i32.const -24)))
      (i64.load (i32.add (get_global $sp) (i32.const -16)))
      (i64.load (i32.add (get_global $sp) (i32.const -8)))))

    (call $memusegas (get_local $offset0) (get_local $length0))
    (set_local $offset0 (i32.add (get_global $memstart) (get_local $offset0))) );; generated by ./wasm/generateInterface.js
(func $CALLDATACOPY (local $offset0 i32)(local $length0 i32) (set_local $offset0 
    (call $check_overflow
      (i64.load (i32.add (get_global $sp) (i32.const 0)))
      (i64.load (i32.add (get_global $sp) (i32.const 8)))
      (i64.load (i32.add (get_global $sp) (i32.const 16)))
      (i64.load (i32.add (get_global $sp) (i32.const 24)))))(set_local $length0 
    (call $check_overflow 
      (i64.load (i32.add (get_global $sp) (i32.const -64)))
      (i64.load (i32.add (get_global $sp) (i32.const -56)))
      (i64.load (i32.add (get_global $sp) (i32.const -48)))
      (i64.load (i32.add (get_global $sp) (i32.const -40)))))

    (call $memusegas (get_local $offset0) (get_local $length0))
    (set_local $offset0 (i32.add (get_global $memstart) (get_local $offset0))))(func $memusegas
  (param $offset i32)
  (param $length i32)

  (local $cost i64)
  ;; the number of new words being allocated
  (local $newWordCount i64)

  (if (i32.eqz (get_local $length))
    (then (return))
  )

  ;; const newMemoryWordCount = Math.ceil[[offset + length] / 32]
  (set_local $newWordCount 
    (i64.div_u (i64.add (i64.const 31) (i64.add (i64.extend_u/i32 (get_local $offset)) (i64.extend_u/i32 (get_local $length))))
               (i64.const 32)))

  ;;if [runState.highestMem >= highestMem]  return
  (if (i64.le_u (get_local $newWordCount) (get_global $wordCount))
    (then (return))
  )

  ;; words * 3 + words ^2 / 512
  (set_local $cost
     (i64.add
       (i64.mul (get_local $newWordCount) (i64.const 3))
       (i64.div_u
         (i64.mul (get_local $newWordCount)
                  (get_local $newWordCount))
         (i64.const 512))))

  (call $useGas  (i64.sub (get_local $cost) (get_global $prevMemCost)))
  (set_global $prevMemCost (get_local $cost))
  (set_global $wordCount (get_local $newWordCount))

  ;; grow actual memory
  ;; the first 31704 bytes are guaranteed to be available
  ;; adjust for 32 bytes  - the maximal size of MSTORE write
  ;; TODO it should be current_memory * page_size
  (set_local $offset (i32.add (get_local $length) (i32.add (get_local $offset) (get_global $memstart))))
  (if (i32.gt_u (get_local $offset) (i32.mul (i32.const 65536) (current_memory)))
    (then
      (grow_memory
        (i32.div_u (i32.add (i32.const 65535) (i32.sub (get_local $offset) (current_memory))) (i32.const 65536)))
      drop
    )
  )
)
(func $bswap_m256
  (param $sp i32)
  (result i32)
  (local $temp i64)

  (set_local $temp (call $bswap_i64 (i64.load (get_local $sp))))
  (i64.store (get_local $sp) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 24)))))
  (i64.store (i32.add (get_local $sp) (i32.const 24)) (get_local $temp))

  (set_local $temp (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 8)))))
  (i64.store (i32.add (get_local $sp) (i32.const  8)) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 16)))))
  (i64.store (i32.add (get_local $sp) (i32.const 16)) (get_local $temp))
  (get_local $sp)
)
(func $bswap_m128
  (param $sp i32)
  (result i32)
  (local $temp i64)

  (set_local $temp (call $bswap_i64 (i64.load (get_local $sp))))
  (i64.store (get_local $sp) (call $bswap_i64 (i64.load (i32.add (get_local $sp) (i32.const 8)))))
  (i64.store (i32.add (get_local $sp) (i32.const 8)) (get_local $temp))
  (get_local $sp)
)
(func $iszero_256
  (param i64)
  (param i64)
  (param i64)
  (param i64)
  (result i32)

  (i64.eqz (i64.or (i64.or (i64.or (get_local 0) (get_local 1)) (get_local 2)) (get_local 3))) 
)
(func $mul_256
  ;;  a b c d e f g h
  ;;* i j k l m n o p
  ;;----------------
  (param $a i64)
  (param $c i64)
  (param $e i64)
  (param $g i64)

  (param $i i64)
  (param $k i64)
  (param $m i64)
  (param $o i64)

  (param $sp i32)

  (local $b i64)
  (local $d i64)
  (local $f i64)
  (local $h i64)
  (local $j i64)
  (local $l i64)
  (local $n i64)
  (local $p i64)
  (local $temp6 i64)
  (local $temp5 i64)
  (local $temp4 i64)
  (local $temp3 i64)
  (local $temp2 i64)
  (local $temp1 i64)
  (local $temp0 i64)

  ;; split the ops
  (set_local $b (i64.and (get_local $a) (i64.const 4294967295)))
  (set_local $a (i64.shr_u (get_local $a) (i64.const 32))) 

  (set_local $d (i64.and (get_local $c) (i64.const 4294967295)))
  (set_local $c (i64.shr_u (get_local $c) (i64.const 32))) 

  (set_local $f (i64.and (get_local $e) (i64.const 4294967295)))
  (set_local $e (i64.shr_u (get_local $e) (i64.const 32)))

  (set_local $h (i64.and (get_local $g) (i64.const 4294967295)))
  (set_local $g (i64.shr_u (get_local $g) (i64.const 32)))

  (set_local $j (i64.and (get_local $i) (i64.const 4294967295)))
  (set_local $i (i64.shr_u (get_local $i) (i64.const 32))) 

  (set_local $l (i64.and (get_local $k) (i64.const 4294967295)))
  (set_local $k (i64.shr_u (get_local $k) (i64.const 32))) 

  (set_local $n (i64.and (get_local $m) (i64.const 4294967295)))
  (set_local $m (i64.shr_u (get_local $m) (i64.const 32)))

  (set_local $p (i64.and (get_local $o) (i64.const 4294967295)))
  (set_local $o (i64.shr_u (get_local $o) (i64.const 32)))
  ;; first row multiplication 
  ;; p * h
  (set_local $temp0 (i64.mul (get_local $p) (get_local $h)))
  ;; p * g + carry
  (set_local $temp1 (i64.add (i64.mul (get_local $p) (get_local $g)) (i64.shr_u (get_local $temp0) (i64.const 32))))
  ;; p * f + carry
  (set_local $temp2 (i64.add (i64.mul (get_local $p) (get_local $f)) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; p * e + carry
  (set_local $temp3 (i64.add (i64.mul (get_local $p) (get_local $e)) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; p * d + carry
  (set_local $temp4 (i64.add (i64.mul (get_local $p) (get_local $d)) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; p * c + carry
  (set_local $temp5  (i64.add (i64.mul (get_local $p) (get_local $c)) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; p * b + carry
  (set_local $temp6  (i64.add (i64.mul (get_local $p) (get_local $b)) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; p * a + carry
  (set_local $a  (i64.add (i64.mul (get_local $p) (get_local $a)) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; second row
  ;; o * h + $temp1 "pg"
  (set_local $temp1 (i64.add (i64.mul (get_local $o) (get_local $h)) (i64.and (get_local $temp1) (i64.const 4294967295))))
  ;; o * g + $temp2 "pf" + carry
  (set_local $temp2 (i64.add (i64.add (i64.mul (get_local $o) (get_local $g)) (i64.and (get_local $temp2) (i64.const 4294967295))) (i64.shr_u (get_local $temp1) (i64.const 32))))
  ;; o * f + $temp3 "pe" + carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $o) (get_local $f)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; o * e + $temp4  + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $o) (get_local $e)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; o * d + $temp5  + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $o) (get_local $d)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; o * c + $temp6  + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $o) (get_local $c)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; o * b + $a  + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $o) (get_local $b)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))
  ;; third row - n
  ;; n * h + $temp2 
  (set_local $temp2 (i64.add (i64.mul (get_local $n) (get_local $h)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  ;; n * g + $temp3 + carry
  (set_local $temp3 (i64.add (i64.add (i64.mul (get_local $n) (get_local $g)) (i64.and (get_local $temp3) (i64.const 4294967295))) (i64.shr_u (get_local $temp2) (i64.const 32))))
  ;; n * f + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $n) (get_local $f)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; n * e + $temp5  + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $n) (get_local $e)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; n * d + $temp6  + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $n) (get_local $d)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; n * c + $a  + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $n) (get_local $c)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; forth row 
  ;; m * h + $temp3
  (set_local $temp3 (i64.add (i64.mul (get_local $m) (get_local $h)) (i64.and (get_local $temp3) (i64.const 4294967295))))
  ;; m * g + $temp4 + carry
  (set_local $temp4 (i64.add (i64.add (i64.mul (get_local $m) (get_local $g)) (i64.and (get_local $temp4) (i64.const 4294967295))) (i64.shr_u (get_local $temp3) (i64.const 32))))
  ;; m * f + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $m) (get_local $f)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; m * e + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $m) (get_local $e)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; m * d + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $m) (get_local $d)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; fith row
  ;; l * h + $temp4
  (set_local $temp4 (i64.add (i64.mul (get_local $l) (get_local $h)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  ;; l * g + $temp5 + carry
  (set_local $temp5 (i64.add (i64.add (i64.mul (get_local $l) (get_local $g)) (i64.and (get_local $temp5) (i64.const 4294967295))) (i64.shr_u (get_local $temp4) (i64.const 32))))
  ;; l * f + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $l) (get_local $f)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; l * e + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $l) (get_local $e)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; sixth row 
  ;; k * h + $temp5
  (set_local $temp5 (i64.add (i64.mul (get_local $k) (get_local $h)) (i64.and (get_local $temp5) (i64.const 4294967295))))
  ;; k * g + $temp6 + carry
  (set_local $temp6 (i64.add (i64.add (i64.mul (get_local $k) (get_local $g)) (i64.and (get_local $temp6) (i64.const 4294967295))) (i64.shr_u (get_local $temp5) (i64.const 32))))
  ;; k * f + $a + carry
  (set_local $a (i64.add (i64.add (i64.mul (get_local $k) (get_local $f)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))))

  ;; seventh row
  ;; j * h + $temp6
  (set_local $temp6 (i64.add (i64.mul (get_local $j) (get_local $h)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  ;; j * g + $a + carry

  ;; eigth row
  ;; i * h + $a
  (set_local $a (i64.add (i64.mul (get_local $i) (get_local $h)) (i64.and (i64.add (i64.add (i64.mul (get_local $j) (get_local $g)) (i64.and (get_local $a) (i64.const 4294967295))) (i64.shr_u (get_local $temp6) (i64.const 32))) (i64.const 4294967295))))

  ;; combine terms
  (set_local $a (i64.or (i64.shl (get_local $a) (i64.const 32)) (i64.and (get_local $temp6) (i64.const 4294967295))))
  (set_local $c (i64.or (i64.shl (get_local $temp5) (i64.const 32)) (i64.and (get_local $temp4) (i64.const 4294967295))))
  (set_local $e (i64.or (i64.shl (get_local $temp3) (i64.const 32)) (i64.and (get_local $temp2) (i64.const 4294967295))))
  (set_local $g (i64.or (i64.shl (get_local $temp1) (i64.const 32)) (i64.and (get_local $temp0) (i64.const 4294967295))))

  ;; save stack 
  (i64.store (get_local $sp) (get_local $a))
  (i64.store (i32.sub (get_local $sp) (i32.const 8)) (get_local $c))
  (i64.store (i32.sub (get_local $sp) (i32.const 16)) (get_local $e))
  (i64.store (i32.sub (get_local $sp) (i32.const 24)) (get_local $g))
)
;; is a less than or equal to b // a >= b
(func $gte_256
  (param $a0 i64)
  (param $a1 i64)
  (param $a2 i64)
  (param $a3 i64)

  (param $b0 i64)
  (param $b1 i64)
  (param $b2 i64)
  (param $b3 i64)

  (result i32)

  ;; a0 > b0 || [a0 == b0 && [a1 > b1 || [a1 == b1 && [a2 > b2 || [a2 == b2 && a3 >= b3 ]]]]
  (i32.or  (i64.gt_u (get_local $a0) (get_local $b0)) ;; a0 > b0
  (i32.and (i64.eq   (get_local $a0) (get_local $b0))
  (i32.or  (i64.gt_u (get_local $a1) (get_local $b1)) ;; a1 > b1
  (i32.and (i64.eq   (get_local $a1) (get_local $b1)) ;; a1 == b1
  (i32.or  (i64.gt_u (get_local $a2) (get_local $b2)) ;; a2 > b2
  (i32.and (i64.eq   (get_local $a2) (get_local $b2))
           (i64.ge_u (get_local $a3) (get_local $b3))))))))
)
(func $callback
  (export "0")
  call $main
)
(func $memset
  (param $ptr i32)
  (param $value i32)
  (param $length i32)
  (result i32)
  (local $i i32)

  (set_local $i (i32.const 0))

  (block $done
    (loop $loop
      (if (i32.ge_u (get_local $i) (get_local $length))
        (br $done)
      )

      (i32.store8 (i32.add (get_local $ptr) (get_local $i)) (get_local $value))

      (set_local $i (i32.add (get_local $i) (i32.const 1)))
      (br $loop)
    )
  )
  (get_local $ptr)
)
(func $bswap_i64
  (param $int i64)
  (result i64)

  (i64.or
    (i64.or
      (i64.or
        (i64.and (i64.shr_u (get_local $int) (i64.const 56)) (i64.const 0xff)) ;; 7 -> 0
        (i64.and (i64.shr_u (get_local $int) (i64.const 40)) (i64.const 0xff00))) ;; 6 -> 1
      (i64.or
        (i64.and (i64.shr_u (get_local $int) (i64.const 24)) (i64.const 0xff0000)) ;; 5 -> 2
        (i64.and (i64.shr_u (get_local $int) (i64.const  8)) (i64.const 0xff000000)))) ;; 4 -> 3
    (i64.or
      (i64.or
        (i64.and (i64.shl (get_local $int) (i64.const 8))   (i64.const 0xff00000000)) ;; 3 -> 4
        (i64.and (i64.shl (get_local $int) (i64.const 24))   (i64.const 0xff0000000000))) ;; 2 -> 5
      (i64.or
        (i64.and (i64.shl (get_local $int) (i64.const 40))   (i64.const 0xff000000000000)) ;; 1 -> 6
        (i64.and (i64.shl (get_local $int) (i64.const 56))   (i64.const 0xff00000000000000)))))) ;; 0 -> 7


  (func $main
    (export "main")
    (local $jump_dest i32)
    (set_local $jump_dest (i32.const -1))

    (block $done
      (loop $loop
        (block $186 (block $185 (block $184 (block $183 (block $182 (block $181 (block $180 (block $179 (block $178 (block $177 (block $176 (block $175 (block $174 (block $173 (block $172 (block $171 (block $170 (block $169 (block $168 (block $167 (block $166 (block $165 (block $164 (block $163 (block $162 (block $161 (block $160 (block $159 (block $158 (block $157 (block $156 (block $155 (block $154 (block $153 (block $152 (block $151 (block $150 (block $149 (block $148 (block $147 (block $146 (block $145 (block $144 (block $143 (block $142 (block $141 (block $140 (block $139 (block $138 (block $137 (block $136 (block $135 (block $134 (block $133 (block $132 (block $131 (block $130 (block $129 (block $128 (block $127 (block $126 (block $125 (block $124 (block $123 (block $122 (block $121 (block $120 (block $119 (block $118 (block $117 (block $116 (block $115 (block $114 (block $113 (block $112 (block $111 (block $110 (block $109 (block $108 (block $107 (block $106 (block $105 (block $104 (block $103 (block $102 (block $101 (block $100 (block $99 (block $98 (block $97 (block $96 (block $95 (block $94 (block $93 (block $92 (block $91 (block $90 (block $89 (block $88 (block $87 (block $86 (block $85 (block $84 (block $83 (block $82 (block $81 (block $80 (block $79 (block $78 (block $77 (block $76 (block $75 (block $74 (block $73 (block $72 (block $71 (block $70 (block $69 (block $68 (block $67 (block $66 (block $65 (block $64 (block $63 (block $62 (block $61 (block $60 (block $59 (block $58 (block $57 (block $56 (block $55 (block $54 (block $53 (block $52 (block $51 (block $50 (block $49 (block $48 (block $47 (block $46 (block $45 (block $44 (block $43 (block $42 (block $41 (block $40 (block $39 (block $38 (block $37 (block $36 (block $35 (block $34 (block $33 (block $32 (block $31 (block $30 (block $29 (block $28 (block $27 (block $26 (block $25 (block $24 (block $23 (block $22 (block $21 (block $20 (block $19 (block $18 (block $17 (block $16 (block $15 (block $14 (block $13 (block $12 (block $11 (block $10 (block $9 (block $8 (block $7 (block $6 (block $5 (block $4 (block $3 (block $2 (block $1 
  (block $0 
    (if
      (i32.eqz (get_global $init))
      (then
        (set_global $init (i32.const 1))
        (br $0))
      (else
        ;; the callback dest can never be in the first block
        (if (i32.eq (get_global $cb_dest) (i32.const 0)) 
          (then
            (if (i32.eq (get_local $jump_dest) (i32.const 4101))
                (then (br $186))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4085))
                (then (br $185))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4079))
                (then (br $184))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4065))
                (then (br $183))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4059))
                (then (br $182))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4045))
                (then (br $181))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4039))
                (then (br $180))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4035))
                (then (br $179))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4025))
                (then (br $178))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 4004))
                (then (br $177))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3998))
                (then (br $176))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3994))
                (then (br $175))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3984))
                (then (br $174))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3963))
                (then (br $173))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3954))
                (then (br $172))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3953))
                (then (br $171))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3945))
                (then (br $170))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3918))
                (then (br $169))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3870))
                (then (br $168))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3850))
                (then (br $167))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3835))
                (then (br $166))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3786))
                (then (br $165))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3766))
                (then (br $164))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3752))
                (then (br $163))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3711))
                (then (br $162))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3699))
                (then (br $161))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3688))
                (then (br $160))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3664))
                (then (br $159))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3638))
                (then (br $158))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3595))
                (then (br $157))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3567))
                (then (br $156))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3524))
                (then (br $155))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3516))
                (then (br $154))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3515))
                (then (br $153))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3504))
                (then (br $152))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3480))
                (then (br $151))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3433))
                (then (br $150))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3403))
                (then (br $149))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3379))
                (then (br $148))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3364))
                (then (br $147))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3352))
                (then (br $146))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3348))
                (then (br $145))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3335))
                (then (br $144))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3305))
                (then (br $143))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3292))
                (then (br $142))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3253))
                (then (br $141))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3241))
                (then (br $140))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3211))
                (then (br $139))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3176))
                (then (br $138))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3165))
                (then (br $137))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3157))
                (then (br $136))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3156))
                (then (br $135))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3145))
                (then (br $134))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3121))
                (then (br $133))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3074))
                (then (br $132))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3053))
                (then (br $131))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3042))
                (then (br $130))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3038))
                (then (br $129))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 3021))
                (then (br $128))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2992))
                (then (br $127))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2975))
                (then (br $126))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2943))
                (then (br $125))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2929))
                (then (br $124))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2905))
                (then (br $123))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2883))
                (then (br $122))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2853))
                (then (br $121))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2818))
                (then (br $120))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2807))
                (then (br $119))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2801))
                (then (br $118))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2800))
                (then (br $117))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2789))
                (then (br $116))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2788))
                (then (br $115))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2768))
                (then (br $114))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2743))
                (then (br $113))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2720))
                (then (br $112))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2715))
                (then (br $111))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2705))
                (then (br $110))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2690))
                (then (br $109))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2682))
                (then (br $108))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2680))
                (then (br $107))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2578))
                (then (br $106))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2567))
                (then (br $105))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2565))
                (then (br $104))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2463))
                (then (br $103))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2452))
                (then (br $102))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2450))
                (then (br $101))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2348))
                (then (br $100))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2337))
                (then (br $99))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2335))
                (then (br $98))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2233))
                (then (br $97))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2222))
                (then (br $96))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2217))
                (then (br $95))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2111))
                (then (br $93))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2080))
                (then (br $92))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2063))
                (then (br $91))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2032))
                (then (br $90))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2016))
                (then (br $89))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2010))
                (then (br $88))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 2006))
                (then (br $87))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1974))
                (then (br $86))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1931))
                (then (br $85))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1925))
                (then (br $84))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1911))
                (then (br $83))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1905))
                (then (br $82))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1891))
                (then (br $81))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1883))
                (then (br $80))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1882))
                (then (br $79))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1870))
                (then (br $78))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1846))
                (then (br $77))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1798))
                (then (br $76))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1767))
                (then (br $75))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1742))
                (then (br $74))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1726))
                (then (br $73))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1713))
                (then (br $72))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1709))
                (then (br $71))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1675))
                (then (br $70))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1643))
                (then (br $69))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1609))
                (then (br $68))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1567))
                (then (br $67))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1555))
                (then (br $66))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1524))
                (then (br $65))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1487))
                (then (br $64))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1476))
                (then (br $63))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1468))
                (then (br $62))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1467))
                (then (br $61))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1455))
                (then (br $60))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1431))
                (then (br $59))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1383))
                (then (br $58))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1361))
                (then (br $57))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1349))
                (then (br $56))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1345))
                (then (br $55))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1306))
                (then (br $54))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1276))
                (then (br $53))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1237))
                (then (br $52))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1203))
                (then (br $51))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1189))
                (then (br $50))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1164))
                (then (br $49))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1141))
                (then (br $48))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1110))
                (then (br $47))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1073))
                (then (br $46))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1062))
                (then (br $45))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1056))
                (then (br $44))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1052))
                (then (br $43))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 1020))
                (then (br $42))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 977))
                (then (br $41))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 971))
                (then (br $40))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 970))
                (then (br $39))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 958))
                (then (br $38))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 957))
                (then (br $37))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 936))
                (then (br $36))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 910))
                (then (br $35))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 885))
                (then (br $34))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 880))
                (then (br $33))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 848))
                (then (br $32))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 811))
                (then (br $31))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 801))
                (then (br $30))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 792))
                (then (br $29))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 791))
                (then (br $28))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 782))
                (then (br $27))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 754))
                (then (br $26))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 705))
                (then (br $25))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 684))
                (then (br $24))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 648))
                (then (br $23))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 597))
                (then (br $22))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 576))
                (then (br $21))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 541))
                (then (br $20))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 497))
                (then (br $19))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 485))
                (then (br $18))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 473))
                (then (br $17))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 449))
                (then (br $16))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 422))
                (then (br $15))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 377))
                (then (br $14))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 349))
                (then (br $13))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 305))
                (then (br $12))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 295))
                (then (br $11))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 294))
                (then (br $10))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 282))
                (then (br $9))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 281))
                (then (br $8))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 238))
                (then (br $7))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 157))
                (then (br $6))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 47))
                (then (br $5))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 37))
                (then (br $4))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 27))
                (then (br $3))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 17))
                (then (br $2))
                (else (if (i32.eq (get_local $jump_dest) (i32.const 16))
                (then (br $1))
                (else (unreachable)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
          )
          (else 
            ;; return callback destination and zero out $cb_dest 
            get_global $cb_dest
            (set_global $cb_dest (i32.const 0))
            (br_table $0  $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 $32 $33 $34 $35 $36 $37 $38 $39 $40 $41 $42 $43 $44 $45 $46 $47 $48 $49 $50 $51 $52 $53 $54 $55 $56 $57 $58 $59 $60 $61 $62 $63 $64 $65 $66 $67 $68 $69 $70 $71 $72 $73 $74 $75 $76 $77 $78 $79 $80 $81 $82 $83 $84 $85 $86 $87 $88 $89 $90 $91 $92 $93 $94 $95 $96 $97 $98 $99 $100 $101 $102 $103 $104 $105 $106 $107 $108 $109 $110 $111 $112 $113 $114 $115 $116 $117 $118 $119 $120 $121 $122 $123 $124 $125 $126 $127 $128 $129 $130 $131 $132 $133 $134 $135 $136 $137 $138 $139 $140 $141 $142 $143 $144 $145 $146 $147 $148 $149 $150 $151 $152 $153 $154 $155 $156 $157 $158 $159 $160 $161 $162 $163 $164 $165 $166 $167 $168 $169 $170 $171 $172 $173 $174 $175 $176 $177 $178 $179 $180 $181 $182 $183 $184 $185 $186)
          )))))(call $useGas (i64.const 25)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 96))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 16))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 1)) )(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 27))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2016))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 37))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2063))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 47))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2016))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 161)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 608135816))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2242054355))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1160258022))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 953160567))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 157))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 305))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1397))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 121)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4277009102))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3735928559))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4276992702))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3405692655))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 43690))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SLT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 294))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 45)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 281))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 801))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 555))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 238))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 20)) (if (i32.lt_s (get_global $sp) (i32.const 96)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2111))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 85)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3084996963))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 349))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 485))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2654435769))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 422))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 58)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 449))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 377))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 25)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 78))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SGT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 791))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32480)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 576))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 541))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 977))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 597))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 95)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 684))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 648))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 977))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 705))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 94)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 754))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 59)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $MOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 782))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 22)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $MOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 497))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 23)) (if (i32.lt_s (get_global $sp) (i32.const 192)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 811))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2016))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 57)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 848))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1062))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 680))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 46)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 880))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1476))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1038))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 970))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 910))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 55)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 936))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $EQ)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 957))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 1)) )(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 885))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 17)) (if (i32.lt_s (get_global $sp) (i32.const 96)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 69)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1020))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1891))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1918))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 46)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1052))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1911))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1938))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1467))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 40)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1110))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1141))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1164))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1189))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SLT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1361))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 48)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1237))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1276))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 977))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 63)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1306))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1345))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 977))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1203))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1383))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 92)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1431))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1073))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 21)) (if (i32.lt_s (get_global $sp) (i32.const 160)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1882))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 40)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1524))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1555))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 28)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SGT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1726))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1643))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1609))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1931))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1877))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 63)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1709))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1675))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1931))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1877))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 29)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1567))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 35)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1742))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1767))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 69)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1798))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 92)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1846))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1487))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 21)) (if (i32.lt_s (get_global $sp) (i32.const 160)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $EXP)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $EXP)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 69)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1974))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1911))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1938))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 46)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2006))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1891))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1918))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967296))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $DIV)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
)(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2032))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 18)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 832))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
)(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2080))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 18)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 16)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2048))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2127))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CODECOPY (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(set_global $cb_dest (i32.const 94))
          (br $done))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $RETURN) (br $done)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
)(call $useGas (i64.const 7)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 17)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 106))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 239)) (if (i32.gt_s (get_global $sp) (i32.const 32320)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 208))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 832))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 555))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) (br $done))(call $useGas (i64.const 17)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 221))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 239)) (if (i32.gt_s (get_global $sp) (i32.const 32320)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 323))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 832))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 680))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) (br $done))(call $useGas (i64.const 17)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 336))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 239)) (if (i32.gt_s (get_global $sp) (i32.const 32320)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 438))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 832))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1038))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) (br $done))(call $useGas (i64.const 17)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $CALLVALUE)
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 451))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 6)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(unreachable))(call $useGas (i64.const 239)) (if (i32.gt_s (get_global $sp) (i32.const 32320)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 553))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 832))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $CALLDATACOPY)
(set_global $sp (i32.add (get_global $sp) (i32.const -96)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1397))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) (br $done))(call $useGas (i64.const 15)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 563))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1958))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 578))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 680))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 588))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1038))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 673))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 616))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 55)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 641))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $EQ)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 661))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 1)) )(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 593))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 17)) (if (i32.lt_s (get_global $sp) (i32.const 96)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1029))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 40)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 726))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 756))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 54)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 778))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 802))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SLT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 926))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 48)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 848))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 865))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 63)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 894))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 911))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 816))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 947))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 92)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 994))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 691))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 21)) (if (i32.lt_s (get_global $sp) (i32.const 160)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1388))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 40)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1084))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 66)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1114))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 28)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 12))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SGT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1237))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32512)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1178))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1165))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 35)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1877))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 63)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1221))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1208))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 35)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 0)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1877))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $XOR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 29)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1126))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 35)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1252))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 60)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1276))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 69)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1306))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 92)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1353))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1049))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 21)) (if (i32.lt_s (get_global $sp) (i32.const 160)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 85)) (if (i32.gt_s (get_global $sp) (i32.const 32384)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3084996963))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1440))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 51)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 32)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1572))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2654435769))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1511))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 58)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1537))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 26)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1468))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 25)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 78))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 43)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SGT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1826))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 49)) (if (i32.gt_s (get_global $sp) (i32.const 32480)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1639))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 8))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1625))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 35)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 3))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1659))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 95)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1723))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 6))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 9))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1708))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $MLOAD)
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 5))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1836))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32576)) 
                 (then (unreachable)))(call $DUP (i32.const 7))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $LT)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1743))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 94)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 64)) 
                  (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 26))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1791))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 59)) (if (i32.gt_s (get_global $sp) (i32.const 32672)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $MOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ISZERO)
(call $ISZERO)
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1818))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 0)) (unreachable))(call $useGas (i64.const 22)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $MOD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1584))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 1)) )(call $useGas (i64.const 23)) (if (i32.lt_s (get_global $sp) (i32.const 192)) 
                  (then (unreachable)))(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1857))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1918))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1867))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1938))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 44)) (if (i32.gt_s (get_global $sp) (i32.const 32544)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 31))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1898))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1938))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 21)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1908))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 4))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1918))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 9)) (if (i32.gt_s (get_global $sp) (i32.const 32704)) 
                 (then (unreachable)))(if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $OR)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $EXP)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 41)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 2))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $EXP)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 3))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MUL)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 2))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
)(call $useGas (i64.const 19)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 2))
(call $SWAP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))(call $useGas (i64.const 34)) (if (i32.gt_s (get_global $sp) (i32.const 32608)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 128))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MLOAD)
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 64))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $DUP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
)(call $useGas (i64.const 53)) (if (i32.gt_s (get_global $sp) (i32.const 32640)) 
                 (then (unreachable)))(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 0))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 4294967295))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $AND)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $MSTORE)
(set_global $sp (i32.add (get_global $sp) (i32.const -64)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 32))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $ADD)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $SWAP (i32.const 0))
(call $SUB)
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
(call $DUP (i32.const 1))
(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(call $PUSH (i64.const 0)(i64.const 0)(i64.const 0)(i64.const 1974))(set_global $sp (i32.add (get_global $sp) (i32.const 32)))
(set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))

                    (set_global $sp (i32.sub (get_global $sp) (i32.const 64)))
                    (br_if $loop (i32.eqz (i64.eqz (i64.or
                      (i64.load (i32.add (get_global $sp) (i32.const 32)))
                      (i64.or
                        (i64.load (i32.add (get_global $sp) (i32.const 40)))
                        (i64.or
                          (i64.load (i32.add (get_global $sp) (i32.const 48)))
                          (i64.load (i32.add (get_global $sp) (i32.const 56)))
                        )
                      )
                    ))))
(call $useGas (i64.const 18)) (if (i32.lt_s (get_global $sp) (i32.const 32)) 
                  (then (unreachable)))(call $SWAP (i32.const 0))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(set_global $sp (i32.add (get_global $sp) (i32.const -32)))
(call $SWAP (i32.const 0))
;; jump
                      (set_local $jump_dest (call $check_overflow 
                                             (i64.load (get_global $sp))
                                             (i64.load (i32.add (get_global $sp) (i32.const 8)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 16)))
                                             (i64.load (i32.add (get_global $sp) (i32.const 24)))))
                      (set_global $sp (i32.sub (get_global $sp) (i32.const 32)))
                      (br $loop))))
)